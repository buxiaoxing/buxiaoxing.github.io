<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布小星的笔记</title>
  <icon>https://www.buxiaoxing.com/assets/img/icon.png</icon>
  <subtitle>写不出惊鸿一场 逃不过碎银几两</subtitle>
  <link href="https://www.buxiaoxing.com/atom.xml" rel="self"/>
  
  <link href="https://www.buxiaoxing.com/"/>
  <updated>2022-07-30T09:24:21.645Z</updated>
  <id>https://www.buxiaoxing.com/</id>
  
  <author>
    <name>布小星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>es6-数字</title>
    <link href="https://www.buxiaoxing.com/post/b20c.html"/>
    <id>https://www.buxiaoxing.com/post/b20c.html</id>
    <published>2022-07-30T09:23:21.000Z</published>
    <updated>2022-07-30T09:24:21.645Z</updated>
    
    <content type="html"><![CDATA[<p><strong>A man is not old until regrets take the place of dreams</strong></p><a id="more"></a><ul><li><p>数值的表示</p><ul><li><p>二进制表示：前缀 0b 或 0B</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b11</span> == <span class="number">3</span><span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>八进制表示：前缀 0o 或 0O</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0o11</span> == <span class="number">9</span><span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>常量</p><ul><li><p><code>Number.EPSION</code></p><blockquote><p>表示1与大于1的最小浮点数之间的差</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">0.1</span><span class="number">-0.3</span>+<span class="number">0.2</span>) &lt; <span class="built_in">Number</span>.EPSION<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>这个值等于<code>2.220446049250313e-16</code></p><blockquote><p>JS 小数运算不精确问题</p><p>JS 计算最终通过计算机进行计算，而计算机只能识别二进制的 0 和 1 ，然而有些小数转成二进制数的时候除不尽，出现无限小数位，这是只能取近似值计算</p></blockquote></li><li><p>安全整数</p><blockquote><p>表示在 JS 中能够精确计算表示的整数，范围在 2<sup>-53</sup> 到 2<sup>53</sup> 之间，超过该范围的整数无法精确表示。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">1</span> == <span class="built_in">Number</span>.MAX_SAFE_INTEGER + <span class="number">2</span><span class="comment">//true最大安全整数</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER<span class="comment">//最小安全整数</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Number 对象新方法</p><ul><li><p><code>Number.inFinite()</code></p><blockquote><p>检查一个数值是否为有限的，即不是 Infinity,NaN</p></blockquote></li><li><p><code>Number.parseInt()</code></p><blockquote><p>用于将给字符串转化为指定进制整数</p></blockquote></li></ul></li><li><p>Math 对象的扩展</p><ul><li><p><code>Math.cbrt()</code></p><blockquote><p>计算一个数的立方根</p></blockquote></li><li><p>指数运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>**<span class="number">2</span><span class="comment">//1</span></span><br><span class="line"><span class="number">2</span>**<span class="number">2</span><span class="comment">//4</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;A man is not old until regrets take the place of dreams&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="es6" scheme="https://www.buxiaoxing.com/tags/es6/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>es6-字符串</title>
    <link href="https://www.buxiaoxing.com/post/7f75.html"/>
    <id>https://www.buxiaoxing.com/post/7f75.html</id>
    <published>2022-07-30T09:21:06.000Z</published>
    <updated>2022-07-30T09:24:21.644Z</updated>
    
    <content type="html"><![CDATA[<p><strong>There isn’t anything in your life that cannot be changed</strong></p><a id="more"></a><ul><li><p>拓展方法</p><ul><li><p>子串的识别</p><blockquote><p>ES6 之前判断字符串是否包含子串，用 indexOf 方法，ES6 新增了子串的识别方法</p></blockquote><ul><li><p>includes(substr)</p><p>返回布尔值，判断是否找到参数字符串</p></li><li><p>startsWith(substr)</p><p>返回布尔值，判断参数字符串是否在原字符串的头部</p></li><li><p>endsWith(substr)</p><p>返回布尔值，判断参数字符是否在原字符串尾部</p></li></ul><p>以上方法都有第二个可选参数，表示搜索起始位置索引</p><p><strong>注意</strong>：</p><pre><code>1. 这三个方法都只返回布尔值，如果需要知道子串的位置，还是得用 indexOf 和 lastIndexOf</code></pre><ol start="2"><li>这三个方法传入正则表达式，会抛出错误。而 indexOf 等方法，会正确理解正则表达式</li></ol></li></ul></li><li><p>字符串重复</p><ul><li><p>repeat(count)</p><p>返回新的字符串，表示将字符串重复指定次数返回</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hello"</span>.repeat(<span class="number">2</span>)<span class="comment">//"hellohello"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>字符串补全</p><ul><li><p>padStart</p><p>  返回新的字符串，表示参数字符串从头部（左侧）补全原字符</p><ul><li><p>padEnd</p><p>返回新的字符串，表示参数字符串从尾部（右侧）补全原字符</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padStart(<span class="number">5</span>,<span class="string">"o"</span>));  <span class="comment">// "ooooh"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padEnd(<span class="number">5</span>,<span class="string">"o"</span>));    <span class="comment">// "hoooo"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"h"</span>.padStart(<span class="number">5</span>));      <span class="comment">// "    h"，默认空格填充</span></span><br><span class="line"><span class="comment">//若指定长度小于等于原字符串长度，则返回原字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.padStart(<span class="number">5</span>,<span class="string">"A"</span>));  <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>模板字符串</p><blockquote><p>定义多行字符串，加入变量和表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"Mike"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`My Name is <span class="subst">$&#123;name&#125;</span>,I am <span class="subst">$&#123;age+<span class="number">1</span>&#125;</span> years old next year.`</span></span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br><span class="line"><span class="comment">// My Name is Mike,I am 28 years old next year.</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;There isn’t anything in your life that cannot be changed&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="es6" scheme="https://www.buxiaoxing.com/tags/es6/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
    <category term="string" scheme="https://www.buxiaoxing.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>es6-Proxy与Reflect</title>
    <link href="https://www.buxiaoxing.com/post/6cc8.html"/>
    <id>https://www.buxiaoxing.com/post/6cc8.html</id>
    <published>2022-07-30T09:19:28.000Z</published>
    <updated>2022-07-30T09:24:21.644Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Defeat never comes to any man until he admits it</strong></p><a id="more"></a><ul><li><p>Proxy</p><blockquote><p>可以对目标对象的读取、函数等操作进行拦截，然后进行操作处理。它不直接操作函数对象，而是像代理模式，通过对象的代理对对象进行操作，在进行这些操作时，可以增加一些需要的额外操作</p></blockquote><ul><li><p>基本用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> header = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function (target,key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'getting'</span>+key)</span><br><span class="line">        <span class="keyword">return</span> target[key]<span class="comment">//注意只能用target[key]，不能使用target.key</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (target,key,value) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'setting'</span>+key)</span><br><span class="line">        target[key] = value</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成target的代理对象，对目标对象进行了浅拷贝，因此目标对象和代理对象相互影响</span></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,header)</span><br><span class="line">proxy.name      <span class="comment">//实际执行的是 hander.get</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.age = <span class="number">18</span>)  <span class="comment">//实际执行的是 hander.set</span></span><br></pre></td></tr></table></figure></li><li><p>实例方法</p><ul><li><p><code>get(target,propKey,receiver)</code></p><p>拦截读取操作</p><p>target: 目标对象</p><p>propKey: 属性</p><p>receiver: Proxy 对象本身</p></li><li><p><code>set(target,propKey,value,receiver)</code></p><p>拦截赋值操作</p><p>value: 新赋的值</p></li><li><p><code>apply(target,ctx,args)</code></p><p>拦截函数调用、call 和 apply 操作</p><p>ctx: 目标对象上下文</p><p>args: 目标对象参数数组</p></li><li><p><code>has(target,propKey)</code></p><p>拦截 HasProperty 操作，即在判断 target 对象是否存在 propKey 属性，会被该方法拦截。但次方法不拦截 <code>for...in</code> 操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hanlder = &#123;</span><br><span class="line">    has: <span class="function"><span class="keyword">function</span>(<span class="params">target,propKey</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"handle has"</span>)</span><br><span class="line">        <span class="keyword">return</span> propKey <span class="keyword">in</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> exam = &#123;<span class="attr">name</span>: <span class="string">'Tom'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(exam,handler)</span><br><span class="line"><span class="string">"name"</span> <span class="keyword">in</span> proxy<span class="comment">//handle //true</span></span><br></pre></td></tr></table></figure></li><li><p><code>deleteProperty(target,propKey)</code></p><p>拦截 delete 操作，如果这个方法抛出异常或返回 false ，propKey 属性将无法被 delete 命令删掉</p></li><li><p><code>construct(target,args)</code></p><p>拦截 new 命令，返回值必须是对象</p></li><li><p><code>defineProperty(target,propKey,propDesc)</code></p><p>拦截 Object.defineProperty ， 若目标不可扩展，增加目标对象上不存在的属性会报错，若属性不可写或不可配置，则不能改变这些属性</p></li><li><p><code>getOwnPropertyDescriptor(target,propKey)</code></p><p>拦截 Object.getOwnPropertyDescriptor() ,返回值为属性描述对象或者 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    getOwnPropertyDescriptor: <span class="function"><span class="keyword">function</span>(<span class="params">target, propKey</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, propKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> target = &#123;<span class="attr">name</span>: <span class="string">"Tom"</span>&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'name'</span>)</span><br><span class="line"><span class="comment">// &#123;value: "Tom", writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>getPrototypeOf(target)</code></p><p>拦截获取对象原型操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包括以下操作</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__</span><br><span class="line"><span class="built_in">Object</span>.prototype.isPrototypeOf()</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf()</span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf()</span><br><span class="line"><span class="keyword">instanceof</span></span><br></pre></td></tr></table></figure><p>返回值必须是对象或 null</p></li><li><p><code>isExtensible(target)</code></p><p>用于拦截 Object.isExtensible    –&gt; 是否是可扩展的</p><p>返回值只能是 boolean 值</p></li><li><p>ownKeys(target)</p><p>用于拦截对象自身属性的读取操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包括以下操作</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames()</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols()</span><br><span class="line"><span class="built_in">Object</span>.keys()</span><br><span class="line">or...in</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>Reflect</p><blockquote><p>用于获取目标对象行为，与 Object 类似，方法与 Proxy 对应</p></blockquote><ul><li><p>方法</p><ul><li><p><code>Reflect.get(target,name,receiver)</code></p><p>查找并返回 target 对象的 name 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> exam = &#123;</span><br><span class="line">    name: <span class="string">"Tom"</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    <span class="keyword">get</span> info()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'name'</span>); <span class="comment">// "Tom"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 target 对象中存在 name 属性的 getter 方法， getter 方法的 this 会绑定 // receiver</span></span><br><span class="line"><span class="keyword">let</span> receiver = &#123;</span><br><span class="line">    name: <span class="string">"Jerry"</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'info'</span>, receiver); <span class="comment">// Jerry20</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 name 为不存在于 target 对象的属性时，返回 undefined</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(exam, <span class="string">'birth'</span>); <span class="comment">// undefined</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当 target 不是对象时，会报错</span></span><br><span class="line"><span class="built_in">Reflect</span>.get(<span class="number">1</span>, <span class="string">'name'</span>); <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure></li><li><p><code>Reflect.set(target,name,value,receiver)</code></p><p>将 target 的 name 属性设置为 value ，返回值为 boolean ，true 表示修改成功， false 表示修改失败。当 target 为不存在的对象时，会报错</p></li><li><p><code>Reflect.has(obj,name)</code></p><p><code>name in obj</code> 指令的函数化，用于查找 name 属性在 obj 对象中是否存在。返回值是 boolean 。如果 obj 不是对象会报错 TypeError</p></li><li><p><code>Reflect.deleteProperty(obj,property)</code></p><p><code>delete obj[property]</code> 的函数化，用于删除 obj 对象的 property 属性，返回值为 boolean 。</p></li><li><p><code>Reflect.construct(obj,args)</code></p><p>等同于 new target(…args)</p></li><li><p><code>Reflect.getPrototype(target)</code></p><p>用于读取 obj 的 <code>__proto__</code> 属性。在 obj 不是对象时不会像 Object 一样把 obj 转为对象，而是会报错</p></li><li><p><code>Reflect.setPrototype(target,newProto)</code></p><p>用于设置目标对象的 prototype</p></li><li><p><code>Reflect.apply(func,thisArg,args)</code></p><p>等同于<code>Function.prototype.apply.call(fun,thisArg,args)</code>。func 表示目标函数；thisArg 表示目标函数绑定的 this 对象；args 表示目标函数调用时传入的参数列表，可以是数组或类似数组的对象。若目标函数无法调用，会抛出 TypeError</p></li><li><p><code>Reflect.defineProperty(target,propKey,attributes)</code></p><p>用于为目标对象定义属性。如果 target 不是对象，会抛出错误</p></li><li><p><code>Reflect.getOwnPropertyDescriptor(target,propKey)</code></p><p>用于得到 target 对象的 propKey 属性的描述对象</p></li><li><p><code>Reflect.isExtensible(target)</code></p><p>用于判断 target 对象是否为可扩展。返回值为 boolean</p></li><li><p><code>Reflect.preventExtensions(target)</code></p><p>用于让 target 对象变为不可扩展。</p></li><li><p><code>Reflect.ownKeys(target)</code></p><p>用于返回 target 返回的所有属性</p></li></ul></li></ul></li><li><p>组合使用</p><blockquote><p>Reflect 对象的方法和 Proxy 对象的方法是一一对应的。所有 Proxy 对象的方法可以通过调用 Reflect 对象的方法获取默认行为，然后进行额外操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> exam = &#123;</span><br><span class="line">    name: <span class="string">"Tom"</span>,</span><br><span class="line">    age: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="keyword">get</span>: function(target, key)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"getting "</span>+key);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,key);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(target, key, value)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"setting "</span>+key+<span class="string">" to "</span>+value)</span><br><span class="line">        <span class="built_in">Reflect</span>.set(target, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(exam, handler)</span><br><span class="line">proxy.name = <span class="string">"Jerry"</span></span><br><span class="line">proxy.name</span><br><span class="line"><span class="comment">// setting name to Jerry</span></span><br><span class="line"><span class="comment">// getting name</span></span><br><span class="line"><span class="comment">// "Jerry"</span></span><br></pre></td></tr></table></figure><ul><li><p>实现观察者模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 Set 集合</span></span><br><span class="line"><span class="keyword">const</span> queuedObservers = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">// 把观察者函数都放入 Set 集合中</span></span><br><span class="line"><span class="keyword">const</span> observe = <span class="function"><span class="params">fn</span> =&gt;</span> queuedObservers.add(fn);</span><br><span class="line"><span class="comment">// observable 返回原始对象的代理，拦截赋值操作</span></span><br><span class="line"><span class="keyword">const</span> observable = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;<span class="keyword">set</span>&#125;);</span><br><span class="line">function <span class="keyword">set</span>(target, key, value, receiver) &#123;</span><br><span class="line">  <span class="comment">// 获取对象的赋值操作</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line">  <span class="comment">// 执行所有观察者</span></span><br><span class="line">  queuedObservers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> observer());</span><br><span class="line">  <span class="comment">// 执行赋值操作</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Defeat never comes to any man until he admits it&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="es6" scheme="https://www.buxiaoxing.com/tags/es6/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>es6-Map与Set</title>
    <link href="https://www.buxiaoxing.com/post/721.html"/>
    <id>https://www.buxiaoxing.com/post/721.html</id>
    <published>2022-07-30T09:17:57.000Z</published>
    <updated>2022-07-30T09:24:21.642Z</updated>
    
    <content type="html"><![CDATA[<p><strong>There is only one truth, it is true to life, and love it</strong></p><a id="more"></a><ul><li><p>Map对象</p><blockquote><p>Map 对象保存键值对，任何值（对象或原始值）都可作为一个键或一个值</p><ul><li>Maps 与 Object 的区别</li></ul></blockquote><ul><li>一个 Object 的键只能是字符串或者 Symbol，但 Map 的键可以是任何值</li><li>Map 中的键是有序的（FIFO（先进先出）原则）</li><li>Map 的键值对个数可以通过 size 属性获取，而 Object 的键值对个数只能手动计算</li><li>Object 都有自己的原型，原型链上的键名可能与自己在对象上设置的键名产生冲突</li></ul><ul><li><p>Map 的迭代</p><ul><li><p><code>for...of</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> myMap)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key+<span class="string">"="</span>+value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [key,value] <span class="keyword">of</span> myMap.entries())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key+<span class="string">"="</span>+value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//entries方法返回一个新的Iterator对象，它按插入顺序包含了Map对象的每个元素的[key,value]数组</span></span><br><span class="line"><span class="comment">//方式3--&gt;遍历键, keys()　方法放回Map的所有键</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">of</span> myMap.keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式4--&gt;遍历值，values() 方法返回Map的所有值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> myMap.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>foreach()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myMap.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key+<span class="string">"="</span>+value)</span><br><span class="line">&#125;,myMap)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Map 对象操作</p><ul><li><p>Map与Array的转换</p><p>Map –&gt; Array</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="string">'1'</span>,<span class="number">2</span>],[<span class="string">'2'</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>(arr)<span class="comment">//&#123;"1" =&gt; 2, "2" =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure><p>Array –&gt; Map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr = <span class="built_in">Array</span>.from(myMap)<span class="comment">//Array.from()函数可以将一个 Map 对象转化成一个二维键值对数组</span></span><br></pre></td></tr></table></figure></li><li><p>Map 的合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">'one'</span>],[<span class="number">2</span>,<span class="string">'two'</span>]])</span><br><span class="line"><span class="keyword">var</span> second = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">3</span>,<span class="string">'three'</span>],[<span class="number">4</span>,<span class="string">'four'</span>]])</span><br><span class="line"><span class="keyword">var</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>([...first,...second])</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>-  Map 的克隆  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMap1 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">'one'</span>],[<span class="number">2</span>,<span class="string">'two'</span>]])</span><br><span class="line"><span class="keyword">var</span> myMap2 = <span class="keyword">new</span> <span class="built_in">Map</span>(myMap2)</span><br><span class="line">myMap1 == myMap2<span class="comment">//falseMap对象构造函数生成实例，迭代出新的对象</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>Set 对象</p><blockquote><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或是对象引用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">mySet.add(<span class="number">1</span>)<span class="comment">//Set(1)&#123;1&#125;</span></span><br><span class="line">mySet.add(<span class="number">5</span>)<span class="comment">//Set(2)&#123;1,5&#125;</span></span><br><span class="line">mySet.add(<span class="number">5</span>)<span class="comment">//Set(2)&#123;1,5&#125;//值的唯一性</span></span><br><span class="line">mySet.add(<span class="string">'some text'</span>)<span class="comment">//Set(3)&#123;1,5,'some text'&#125;//值的多样性</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">mySet.add(o)<span class="comment">//Set(4)&#123;1,5,'some text',&#123;...&#125;&#125;</span></span><br><span class="line">mySet.add(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;)<span class="comment">//Set(5)&#123;1,5,'some text',&#123;...&#125;,&#123;...&#125;&#125;对象之间引用不同不恒等，即使值相同，Set也能存储</span></span><br></pre></td></tr></table></figure><ul><li><p>类型转换</p><p>Array –&gt; Set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>Set –&gt; Array</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [...mySet]</span><br></pre></td></tr></table></figure><p>String –&gt; Set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'hello'</span>)<span class="comment">//Set(4)&#123;'h','e','l','o'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Set 作用</p><ul><li><p>数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">var</span> arr = [...mySet]<span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure></li><li><p>交集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span>=&gt;</span>b.has(x)))<span class="comment">//Set(2)&#123;2,3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>并集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">var</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a,...b])<span class="comment">//Set(6)&#123;1,2,3,4,5,6&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>差集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span>=&gt;</span>!b.has(x)))<span class="comment">//Set(1)&#123;1&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;There is only one truth, it is true to life, and love it&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="es6" scheme="https://www.buxiaoxing.com/tags/es6/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>es6-symbol</title>
    <link href="https://www.buxiaoxing.com/post/c61a.html"/>
    <id>https://www.buxiaoxing.com/post/c61a.html</id>
    <published>2022-07-30T09:16:49.000Z</published>
    <updated>2022-07-30T09:24:21.643Z</updated>
    
    <content type="html"><![CDATA[<p><strong>To know yourself is the first and most important step in pursuing your dreams</strong></p><a id="more"></a><blockquote><p>原始数据类型，表示独一无二的值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sy = <span class="built_in">Symbol</span>(<span class="string">'kk'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sy)<span class="comment">//Symbol(kk)</span></span><br><span class="line"><span class="keyword">typeof</span>(sy)<span class="comment">//'Symbol'</span></span><br></pre></td></tr></table></figure><p>相同参数 Symbol() 返回的值不相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sy1 = <span class="built_in">Symbol</span>(<span class="string">'kk'</span>)</span><br><span class="line">sy == sy1<span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li><p>用做属性名</p><blockquote><p>每一个 Symbol 的值是不相等的，保证属性名不重复</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="keyword">let</span> sy = <span class="built_in">Symbol</span>(<span class="string">'key1'</span>)</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">obj[sy] = <span class="string">'kk'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)<span class="comment">//&#123;Symbol(key1):'kk'&#125;</span></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [sy]: <span class="string">'kk'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法3</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,sy,&#123;<span class="attr">value</span>:<span class="string">'kk'</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>注</strong>    : Symbol 作为对象属性名不能用点运算符，必须用方括号</p><p>Symbol 作为属性名，该属性为共有属性，可在类的外部访问，但不会出现在<code>for...in</code>,<code>for...of</code>循环中，也不会被 <code>Object.keys()</code>    <code>Object.getOwnPropertyNames()</code> 返回。但可通<code>Object.getOwnPropertySymbols()</code> 和 <code>Reflect.ownKeys()</code>取到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sy = <span class="built_in">Symbol</span>(<span class="string">'key1'</span>)</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [sy]: <span class="string">'kk'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;<span class="comment">//不会进入循环</span></span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))   <span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))  <span class="comment">//[Symbol(key1)]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(obj))   <span class="comment">//[Symbol(key1)]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方法</p><ul><li><p>Symbol.for()</p><blockquote><p>首先在全局搜索被登记的Symbol中是否有该字符串参数作为名称的 Symbol 值，如果有即返回 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值并登记在全局中供搜索</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sy = <span class="built_in">Symbol</span>(<span class="string">'kk'</span>)</span><br><span class="line"><span class="keyword">let</span> sy2 = <span class="built_in">Symbol</span>.for(<span class="string">'kk'</span>)</span><br><span class="line">sy == sy2 <span class="comment">//false</span></span><br><span class="line"><span class="keyword">let</span> s3 = <span class="built_in">Symbol</span>.for(<span class="string">'kk'</span>)</span><br><span class="line">sy2 == sy3 <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>    : 初始化的 Symbol 的变量并不会在全局中登记</p></li><li><p>Symbol.keyFor()</p><blockquote><p>返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>.keyFor(sy)<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">Symbol</span>.sy2(sy2)<span class="comment">//'kk'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;To know yourself is the first and most important step in pursuing your dreams&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="es6" scheme="https://www.buxiaoxing.com/tags/es6/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>es6-结构赋值</title>
    <link href="https://www.buxiaoxing.com/post/f81e.html"/>
    <id>https://www.buxiaoxing.com/post/f81e.html</id>
    <published>2022-07-30T09:15:38.000Z</published>
    <updated>2022-07-30T09:24:21.645Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Light tomorrow with today</strong></p><a id="more"></a><ul><li><p>数组模型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>[a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment">//a=1,b=2,c=3</span></span><br><span class="line"><span class="keyword">let</span>[a,[b,c]] = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]]<span class="comment">//a=1,b=2,c=3</span></span><br><span class="line"><span class="keyword">let</span>[a, ,b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment">//a=1,b=3</span></span><br><span class="line"><span class="keyword">let</span>[a=<span class="number">1</span>,b] = []<span class="comment">//a=1,b=undefined</span></span><br><span class="line"><span class="comment">//剩余运算符</span></span><br><span class="line"><span class="keyword">let</span>[a,...b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment">//a=1,b=[2,3]</span></span><br><span class="line"><span class="keyword">let</span>[a,b,c] = <span class="string">'hello'</span><span class="comment">//a='h' b='e' c='l'</span></span><br></pre></td></tr></table></figure></li><li><p>对象模型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>&#123;foo,bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'aaa'</span>,<span class="attr">bar</span>:<span class="string">'bbb'</span>&#125;<span class="comment">//foo='aaa' bar='bbb'</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Light tomorrow with today&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="es6" scheme="https://www.buxiaoxing.com/tags/es6/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>es6-let与const</title>
    <link href="https://www.buxiaoxing.com/post/b7c2.html"/>
    <id>https://www.buxiaoxing.com/post/b7c2.html</id>
    <published>2022-07-30T09:13:27.000Z</published>
    <updated>2022-07-30T09:24:21.645Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Victory won’t come to me unless I go to it</strong></p><a id="more"></a><ul><li><p>let  （定义变量）</p><ul><li><p>代码块内有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>不能重复声明</p></li><li><p>不存在变量提升</p></li></ul></li><li><p>const   （定义常量）</p><ul><li>一旦声明必须初始化</li><li>声明之后不允许改变</li></ul><p><strong>const如何做到声明初始化后不允许改变的？</strong></p><blockquote><p>保证变量指向的内存地址所保存的数据不允许改动，对于简单类型，值就保存在变量指向的那个内存地址，因此 const 声明的简单类型的变量等同于那个常量。而复杂类型、变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用 const 声明复杂类型对象时要慎重</p></blockquote></li><li><p>暂时性死区</p><blockquote><p>代码块内如果存在 let 或则 const ，代码块会对这些命令的变量从块的开始形成一个封闭作用域。在声明变量 PI 之前使用它会报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PI = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(PI)<span class="comment">//ReferenceError: a is not defined</span></span><br><span class="line">    <span class="keyword">const</span> PI = <span class="string">'3.14'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Victory won’t come to me unless I go to it&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="es6" scheme="https://www.buxiaoxing.com/tags/es6/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js基础-字符串</title>
    <link href="https://www.buxiaoxing.com/post/e9f8.html"/>
    <id>https://www.buxiaoxing.com/post/e9f8.html</id>
    <published>2022-07-30T09:10:13.000Z</published>
    <updated>2022-07-30T09:24:21.646Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Miracles sometimes occur, but one has to work terribly for them</strong></p><a id="more"></a><ul><li>字符串常用方法<ul><li><code>str.toUpperCase()</code>     转为大写字母</li><li><code>str.split()</code> 字符串分割为数组</li><li><code>str.padStart(length, str)</code> <code>str.padEnd()</code> 字符串补全长度功能</li><li><code>str.slice(start, [end])</code>  提取字符串某部分并返回</li><li><code>parseInt(str, [进制])</code>  以参数进制转为10进制</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Miracles sometimes occur, but one has to work terribly for them&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="string" scheme="https://www.buxiaoxing.com/tags/string/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="https://www.buxiaoxing.com/post/767f.html"/>
    <id>https://www.buxiaoxing.com/post/767f.html</id>
    <published>2022-07-29T09:04:55.000Z</published>
    <updated>2022-07-29T09:10:18.587Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Yesterday is history. Tomorrow is a mystery. But today is a gift. That is why it is called the present</strong></p><a id="more"></a><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以超级管理员的身份执行命令</span></span><br><span class="line">sudo ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到root用户</span></span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户</span></span><br><span class="line">who am i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">cat [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p [路径]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">touch [文件名]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件重命名</span></span><br><span class="line">mv [oldName] [newName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件移动（*可以代表当下文件夹下所有文件）</span></span><br><span class="line">mv [from路径] [to路径]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件拷贝</span></span><br><span class="line">cp [from路径] [to路径]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件/目录</span></span><br><span class="line">rm -rf [文件名/目录]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关机</span></span><br><span class="line">shutdown -h now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">shutdown -r now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看注册的命令</span></span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装路径</span></span><br><span class="line"><span class="built_in">where</span> node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个目录切换</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理终端</span></span><br><span class="line">clear </span><br><span class="line">ctrl+L</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Yesterday is history. Tomorrow is a mystery. But today is a gift. That is why it is called the present&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="后端" scheme="https://www.buxiaoxing.com/tags/后端/"/>
    
    <category term="linux" scheme="https://www.buxiaoxing.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>docker基础命令</title>
    <link href="https://www.buxiaoxing.com/post/80e1.html"/>
    <id>https://www.buxiaoxing.com/post/80e1.html</id>
    <published>2022-07-29T08:59:45.000Z</published>
    <updated>2022-07-29T09:02:24.169Z</updated>
    
    <content type="html"><![CDATA[<p><strong>凡是你抗拒的都会持续</strong></p><a id="more"></a><blockquote><p>安装</p><p>镜像 image</p><p>容器 ps</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧版本</span></span><br><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像仓库（不推荐使用官方仓库，速度很慢）</span></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 设置镜像仓库（推荐使用阿里云仓库）</span></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新yum软件包索引</span></span><br><span class="line">$ sudo yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装社区版docker</span></span><br><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">$ sudo docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试运行容器</span></span><br><span class="line">$ sudo docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下载的镜像</span></span><br><span class="line">$ sudo docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启服务</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止docker服务</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载相关依赖</span></span><br><span class="line">$ sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空工作路径</span></span><br><span class="line">$ sudo rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">docker search mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从仓库拉取镜像，docker pull[镜像名]:[版本号(不写默认最新)]</span></span><br><span class="line">docker pull mysql:8.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成镜像</span></span><br><span class="line">docker build -t express-demo .</span><br><span class="line">-t 指定镜像名</span><br><span class="line">. 表示在当前目录的Dockerfile开始构建</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地镜像</span></span><br><span class="line">docker rmi &lt;image&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例并启动容器</span></span><br><span class="line">docker run -p 3307:3306 --name mysql8.0 -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0</span><br><span class="line">--name 指定容器名</span><br><span class="line">-d 后台运行</span><br><span class="line">-p 指定映射端口</span><br><span class="line">-v 指定文件挂载路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在运行的容器 -a 查看所有容器，包括停止了的容器</span></span><br><span class="line">docker ps [-a]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart &lt;容器名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop &lt;container id&gt;/&lt;names&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm &lt;container id&gt;/&lt;names&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以交互模式进入docker容器内部系统操作台</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql8.0 bash</span><br><span class="line"><span class="comment"># 然后登陆mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动已经停止的容器</span></span><br><span class="line">docker start [容器名]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;凡是你抗拒的都会持续&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="后端" scheme="https://www.buxiaoxing.com/tags/后端/"/>
    
    <category term="docker" scheme="https://www.buxiaoxing.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>js基础-js的特点</title>
    <link href="https://www.buxiaoxing.com/post/9f67.html"/>
    <id>https://www.buxiaoxing.com/post/9f67.html</id>
    <published>2022-07-29T06:50:32.000Z</published>
    <updated>2022-07-29T06:50:50.842Z</updated>
    
    <content type="html"><![CDATA[<p><strong>所有值得做的事，做得一团糟也值得做</strong></p><a id="more"></a><blockquote><p>单线程，解释性型语言，即时编译</p></blockquote><ul><li>单线程</li></ul><p>​        同一时间只能做一件事</p><p>​        </p><ul><li><p>编译型语言</p><p>c,  c++</p><ul><li><p>优点：快</p></li><li><p>缺点：移植性不好</p><p><strong>编译所有代码后再执行</strong></p></li></ul></li><li><p>解释型语言</p><p>js、php、python</p><ul><li><p>优点：跨平台</p></li><li><p>缺点：略慢</p><p><strong>解释一行执行一行</strong></p></li></ul></li><li><p>JAVA</p><p>Java既是编译型的，又是解释型的。程序代码经过编译之后转化成一种称为Java字节码的中间语言，java虚拟机(JVM)将对字节码进行解释和执行</p></li><li><p>JS的发展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a(js代码)--&gt;b(字节码)--&gt;c(JS引擎)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;所有值得做的事，做得一团糟也值得做&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-Math</title>
    <link href="https://www.buxiaoxing.com/post/acb.html"/>
    <id>https://www.buxiaoxing.com/post/acb.html</id>
    <published>2022-07-29T06:49:07.000Z</published>
    <updated>2022-07-29T06:49:32.852Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我无法搬动岁月，你披着一身月光，停泊在秋天里</strong></p><a id="more"></a><ul><li>属性<ul><li>Math.PI                    圆周率</li></ul></li></ul><ul><li><p>方法</p><ul><li><p>Math.floor()               向下取整</p><p><code>Math.floor(12.9)            --&gt;        12</code></p></li><li><p>Math.ceil()                  向上取整</p><p><code>Math.ceil(12.1)        --&gt;        13</code></p></li><li><p>Math.round()               四舍五入取整</p></li><li><p>Math.random()            产生一个 0~1 之间的随机数</p></li><li><p>Math.pow(x,y)              x 的 y 次幂</p></li><li><p>Math.sqrt(x)                 x 的平方根</p></li></ul></li></ul><ul><li><p>返回两个数之间的随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myRandom</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n1 = num2 - num1</span><br><span class="line">    <span class="keyword">var</span> n2 = <span class="built_in">Math</span>.random() * n1 + num1</span><br><span class="line">    <span class="keyword">return</span> n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我无法搬动岁月，你披着一身月光，停泊在秋天里&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-正则表达式</title>
    <link href="https://www.buxiaoxing.com/post/cd27.html"/>
    <id>https://www.buxiaoxing.com/post/cd27.html</id>
    <published>2022-07-29T06:47:11.000Z</published>
    <updated>2022-07-29T06:48:27.505Z</updated>
    
    <content type="html"><![CDATA[<p><strong>你治好我的忧郁，而后赐我悲伤</strong></p><a id="more"></a><ul><li><p>转义字符<br>​    \</p><ul><li>\n                换行</li><li>\r                 行结束</li><li>\t                  制表符</li></ul></li><li><p>多行字符串</p><p>​    每行结束 \ </p></li><li><p>正则表达式的作用</p><p>​    匹配特殊字符或有特殊搭配原则的字符的最佳选择</p></li></ul><ul><li><p>创建 RegExp 对象</p><ul><li><p>字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/规则/</span>属性</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">//i忽视大小写</span></span><br><span class="line"><span class="comment">//m执行多行匹配</span></span><br><span class="line"><span class="comment">//g执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><code>var reg = new RegExp(&quot;规则&quot;,&quot;属性&quot;)</code></li></ul><ul><li><p>方法</p><ul><li><p><code>reg.test(str)</code></p><p>字符串是否包含正则表达式中的字符</p></li><li><p><code>reg.exec(str)</code></p><p>返还一个类数组</p></li><li><p><code>reg.lastIndex</code></p><p>匹配时的游标</p></li><li><p><code>str.match(reg)</code></p><p>返还匹配的字符</p></li><li><p><code>str.split(reg)</code></p><p>按正则表达式拆分</p></li><li><p><code>str.replice(reg,new)</code></p><p>不用正则表达式只能替换一个</p><p>new 可以使用 $ 引用匹配到的字符</p></li></ul></li></ul><ul><li><p>规则</p><ul><li><p>表达式    []</p><p>查找某个范围内的字符，一个方括号表示一位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[123456789]/</span></span><br><span class="line">reg = <span class="regexp">/[0-9]/</span></span><br><span class="line">reg = <span class="regexp">/[A-Z]/</span></span><br><span class="line">reg = <span class="regexp">/[0-9A-Z]/</span></span><br><span class="line">reg = <span class="regexp">/[^a]/</span><span class="comment">//^放在[]里面表示非，放在[]外面表示以什么开头</span></span><br><span class="line">reg = <span class="regexp">/abc|bcd/</span><span class="comment">//或</span></span><br></pre></td></tr></table></figure></li><li><p>元字符(一个元字符表示一位)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\w<span class="comment">//[0-9A-z]</span></span><br><span class="line">\W<span class="comment">//[^w]</span></span><br><span class="line">\d              <span class="comment">//[0-9]</span></span><br><span class="line">\D</span><br><span class="line">\s<span class="comment">//[\t\n\r\f\v]</span></span><br><span class="line">\S</span><br><span class="line">\b<span class="comment">//单词边界</span></span><br><span class="line">\B</span><br><span class="line">\u<span class="comment">//unicode 编码匹配汉字[\u0000-\uffff] 能匹配一切</span></span><br><span class="line">.<span class="comment">//[^\r\n]</span></span><br></pre></td></tr></table></figure></li><li><p>量词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n+<span class="comment">//&#123;1,&#125;</span></span><br><span class="line">n*<span class="comment">//&#123;0,&#125;</span></span><br><span class="line">n?<span class="comment">//&#123;0,1&#125;</span></span><br><span class="line">n&#123;x&#125;<span class="comment">//&#123;x&#125;</span></span><br><span class="line">n&#123;x,y&#125;<span class="comment">//&#123;x,y&#125;</span></span><br><span class="line">n&#123;x,&#125;<span class="comment">//&#123;x,&#125;</span></span><br><span class="line">n$<span class="comment">//以n结束</span></span><br><span class="line">^n<span class="comment">//以n开始</span></span><br><span class="line"><span class="comment">//贪婪匹配：有多个就匹配多个</span></span><br><span class="line"><span class="comment">//非贪婪匹配：量词后面加'?'能少匹配就少匹配</span></span><br></pre></td></tr></table></figure></li><li><p>子表达式与反向引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(\w)\<span class="number">1</span>(\w)\<span class="number">1</span>/<span class="comment">// \1 表示引用第一子表达式的内容</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>正向预查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/a(?=b)/<span class="comment">//查找后面是b的a</span></span><br><span class="line">/a(!=b)/</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>匹配有含义的字符需要转义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/\\/<span class="comment">// 匹配\</span></span><br><span class="line">/\?<span class="regexp">//</span><span class="regexp">/ 匹配?</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;你治好我的忧郁，而后赐我悲伤&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="正则" scheme="https://www.buxiaoxing.com/tags/正则/"/>
    
  </entry>
  
  <entry>
    <title>js基础-js异步加载</title>
    <link href="https://www.buxiaoxing.com/post/6f71.html"/>
    <id>https://www.buxiaoxing.com/post/6f71.html</id>
    <published>2022-07-29T06:45:26.000Z</published>
    <updated>2022-07-29T06:46:35.642Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这世界，至少有朵云，很专注的为你白过一回</strong></p><a id="more"></a><ul><li><p>js 加载的确定</p><p>加载工具方法没必要阻塞文档，js 加载会影响页面效率，一旦网速不好，那么整个网站将等待 js 加载而不进        行后续渲染工作有些工具方法需要加载，用到的时候再加载，不用不加载</p></li></ul><p>​    </p><ul><li><p>异步加载的方式</p><ul><li><p>defer            只兼容 IE ，可以将代码写在 script 标签内部。等待整个页面解析完毕时加载</p></li><li><p>async           标准方法，只能加载外部脚本，加载完就执行</p></li><li><p>通过创建 script dom 元素异步加载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span></span><br><span class="line"><span class="javascript">script.type = <span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="javascript">script.src = <span class="string">"demo.js"</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(script.readyState)&#123;<span class="comment">//IE</span></span></span><br><span class="line"><span class="javascript">        script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(script.readyState == <span class="string">"complete"</span> || script.readyState == <span class="string">"loaded"</span>)&#123;</span></span><br><span class="line">                test()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//非IE</span></span></span><br><span class="line"><span class="javascript">        script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            test()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.head.appendChild(script)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>JS 时间加载线<ul><li>创建 document 对象，开始解析 web 页面。解析 HTML 元素和他们的文本内容后添加  Element 对象和 Text 节点到文档中，阶段 <code>document.readyState = &quot;loading&quot;</code></li><li>遇到 link 外部 css，创建线程加载，并继续解析文档</li><li>遇到 script 外部 js ，并且没有设置 async，defer ，浏览器加载，并阻塞，等待 js 加载完成并执行脚本，然后继续解析文档</li><li>遇到 script 外部 js , 并且设置有 async, defer, 浏览器创建线程加载，并继续解析文档，对于 async 属性的脚本，脚本加载完成之后立即执行（异步禁止使用 document.write()）</li><li>对于 img 等，先正常解析 html 结构，然后浏览器异步加载，src，并继续解析文档</li><li>文档解析完成， <code>document.readyState = &#39;interactive&#39;</code></li><li>当文档解析完成后，所有设置 defer 的脚本会按照顺序执行。（注意与 async 的不同，但同样禁止使用 document.write()）</li><li>document 对象触发 DOMContentLoaded 事件，这也标志着程序执行从同步脚本执行的阶段，转为事件驱动阶段</li><li>当所有 async 的脚本加载完成并执行后、img 等加载完成后，document.readyState = ‘complete’，window 对象触发 load 事件</li><li>从此，以异步响应方式处理用户输入、网络事件</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;这世界，至少有朵云，很专注的为你白过一回&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="异步" scheme="https://www.buxiaoxing.com/tags/异步/"/>
    
  </entry>
  
  <entry>
    <title>js基础-json</title>
    <link href="https://www.buxiaoxing.com/post/49eb.html"/>
    <id>https://www.buxiaoxing.com/post/49eb.html</id>
    <published>2022-07-29T06:41:51.000Z</published>
    <updated>2022-07-29T06:43:04.142Z</updated>
    
    <content type="html"><![CDATA[<p><strong>所谓爱情，其实就是一次大病，我的病好了</strong></p><a id="more"></a><ul><li><p>概念与用途</p><p>​    JSON 是一种传输数据的格式（以对象为样板，本质上是对象，但用途有区别，对象是本地用的，json用来传输    的），JSON 的属性名必须双引号</p></li></ul><ul><li>JSON.parse()</li></ul><p>​        <code>string         --&gt;                JSON</code></p><ul><li>JSON.stringfy()</li></ul><p>​        <code>json        --&gt;            string</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;所谓爱情，其实就是一次大病，我的病好了&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="json" scheme="https://www.buxiaoxing.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>js基础-事件</title>
    <link href="https://www.buxiaoxing.com/post/a4a9.html"/>
    <id>https://www.buxiaoxing.com/post/a4a9.html</id>
    <published>2022-07-29T06:40:46.000Z</published>
    <updated>2022-07-29T06:43:10.991Z</updated>
    
    <content type="html"><![CDATA[<p><strong>花店不开了，花继续开</strong></p><a id="more"></a><ul><li><p>绑定事件</p><ul><li><p>element.onclick = function(){}</p><p>单个对象的单个事件只能绑定一个函数</p><p>解除事件:  <code>element.onclick = null</code></p></li><li><p>element.addEventListener(‘click’, function(){}, false)</p><p>单个对象的单个事件可以绑定多个函数</p><p>解除事件：<code>element.removeEventListener(&#39;click&#39;, function(){}, false)</code></p></li><li><p>attachEvent(‘onclick’, function(){})</p><p>IE 独有，与 addEventListener 一样</p><p>this –&gt; window</p><p>解除: <code>detachEvent(&#39;onclick&#39;, function(){})</code></p></li></ul></li></ul><ul><li><p>事件处理模型：冒泡，捕获</p><ul><li><p>事件冒泡</p><p><code>element.addEventListener(&#39;click&#39;, function(e){}, false)</code></p><ul><li><p>结构上（非视觉上）嵌套的元素，如果触发子元素事件，会一级一级向上传递事件</p></li><li><p>先触发子元素事件，再触发父元素事件</p></li><li><p>取消冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.stopPropagation()<span class="comment">//W3C标准</span></span><br><span class="line">e.cancelBubble()<span class="comment">//IE</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>事件捕获<br><code>element.addEventListener(&#39;click&#39;, function(){}, true)</code></p><p>先触发父元素事件，再触发子元素事件</p></li></ul><ul><li><p>事件对象</p><p>事件函数中添加参数 e ，系统会自动给函数传参</p><p><code>function(e){}</code></p><ul><li><p>获取事件对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = e || <span class="built_in">window</span>.event<span class="comment">//兼容性</span></span><br><span class="line"><span class="comment">//事件源对象，触发事件的元素，冒泡的最底层的元素</span></span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement</span><br></pre></td></tr></table></figure></li></ul></li><li><p>阻止默认事件</p><ul><li><p>右键出菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span><span class="comment">//只针对 on+事件</span></span><br><span class="line">    e.preventDefault()<span class="comment">//W3C</span></span><br><span class="line">    e.returnValue = <span class="literal">false</span><span class="comment">//IE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>a 标签点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>事件类型</p><ul><li><p>鼠标事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line">click </span><br><span class="line">mousedown</span><br><span class="line">mouseup</span><br><span class="line">mousemove</span><br><span class="line"></span><br><span class="line">mousemover</span><br><span class="line">mouseout</span><br><span class="line">contextmenu</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动端</span></span><br><span class="line">touchstart</span><br><span class="line">touchmove</span><br><span class="line">touchend</span><br></pre></td></tr></table></figure><p>*<em>注：只有 mousedown 和 mouseup 可以区分左键右键 <code>e.button: 0(左键), 2(右键), 1(中间)</code> *</em></p></li><li><p>键盘事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keydown</span><br><span class="line">keypress</span><br><span class="line">keyup</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>**注意：keydown  keypress 按下会一直触发**- keydown                                        能检测所有按键- keypress                                        只能检测字符键（能检测字符键的大小写）  keydown &gt; keypress &gt; keyup</code></pre><ul><li><p>文本操作事件</p><ul><li>input                                              每次输入都会触发</li><li>focus     </li><li>blur</li><li>change                                          鼠标聚焦和鼠标脱胶时，触发框内容发生改变触发</li></ul></li><li><p>window事件</p><ul><li>onscroll                                         滚动条滚动触发</li><li>load                                                页面渲染完触发</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;花店不开了，花继续开&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="event" scheme="https://www.buxiaoxing.com/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>git中的tag</title>
    <link href="https://www.buxiaoxing.com/post/6f24.html"/>
    <id>https://www.buxiaoxing.com/post/6f24.html</id>
    <published>2022-07-29T06:34:59.000Z</published>
    <updated>2022-07-29T06:39:16.412Z</updated>
    
    <content type="html"><![CDATA[<p><strong>你没有如期归来，这正是离别的意义</strong></p><a id="more"></a><ul><li><p>Git 实际上是一条条commit记录</p></li><li><p>分支是对多条commit记录的引用</p></li><li><p>head指向当前的commit记录，切换分支实际上就是移动head</p></li><li><p>如果一条commit记录没有被任何分支和tag引用，那么就会被回收，类似js的回收机制，不可达就会被回收</p></li><li><p>branch 对应一系列 commit，是很多点连成的一根线，有一个HEAD 指针，是可以依靠 HEAD 指针移动的</p></li><li><p>tag是对应commit的一个点，是不可移动的</p><ul><li><p>tag操作的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagName&gt; <span class="comment">#创建本地tag,基于当前分支的最后一个commit</span></span><br><span class="line">git push origin &lt;tagName&gt; <span class="comment">#推送到远程仓库</span></span><br><span class="line">git push origin --tags <span class="comment">#一次推送本地所有未推送的标签</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline <span class="comment">#查看当前分支的提交历史，里面包含 commit id</span></span><br><span class="line">git tag -a &lt;tagName&gt; &lt;commitId&gt; <span class="comment">#创建本地tag,基于指定commit</span></span><br><span class="line"></span><br><span class="line">git show &lt;tagName&gt; <span class="comment"># 查看本地某个tag的详细信息</span></span><br><span class="line"><span class="comment">#查看本地所有tag</span></span><br><span class="line">git tag </span><br><span class="line">git tag -l</span><br><span class="line"><span class="comment"># 查看远程所有tag</span></span><br><span class="line">git ls-remote --tags origin</span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">git tag -d &lt;tagName&gt;</span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">git push origin :&lt;tagName&gt;</span><br><span class="line"><span class="comment"># 重命名tag: 本质上是删除旧名字的tag，再新建新名字tag</span></span><br><span class="line"><span class="comment"># 如果只在本地</span></span><br><span class="line">git tag -d &lt;oldTagName&gt;</span><br><span class="line">git tag &lt;newTagName&gt;</span><br><span class="line">git push origin &lt;newTagName&gt;</span><br><span class="line"><span class="comment"># 如果远程也有</span></span><br><span class="line">git tag -d &lt;oldTagName&gt;</span><br><span class="line">git push origin :&lt;oldTagName&gt;</span><br><span class="line">git tag &lt;newTagName&gt;</span><br><span class="line">git push origin &lt;newTagName&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;你没有如期归来，这正是离别的意义&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="Git" scheme="https://www.buxiaoxing.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>js基础-window</title>
    <link href="https://www.buxiaoxing.com/post/6199.html"/>
    <id>https://www.buxiaoxing.com/post/6199.html</id>
    <published>2022-07-28T09:52:13.000Z</published>
    <updated>2022-07-28T09:52:47.060Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我坐在树下，等最后一片落叶，就当和你最后的告别</strong></p><a id="more"></a><ul><li>定时器<ul><li>setInterval(执行函数，毫秒数)                                        每过多少毫秒执行一次函数，返回该定时器的唯一标识</li><li>clearInterval(timer)                                                          通过唯一标识终止定时器</li><li>setTimeout(函数，毫秒数)                                               过多少毫秒执行函数，只执行一次，返回该定时器唯一标识</li><li>clearTimeout(timer)</li></ul></li></ul><ul><li><p>滚动条</p><p><code>pageXOffset/pageYOffset</code>                                                  查看滚动距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装一个兼容的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageXOffset)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            y: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            y: <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>scoll(x,y)</code>                                让滚动条滚动到指定距离</p><p><code>scollBy(x,y)</code>                            累加滚动距离</p></li><li><p>浏览器窗口大小</p><p><code>innerWidth/innerHeight</code>                            可视区窗口大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &amp;&amp; <span class="built_in">window</span>.innerWidth)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">window</span>.innerWidth,</span><br><span class="line">            y: <span class="built_in">window</span>.innerHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode == <span class="string">'BackCompat'</span>)&#123;<span class="comment">//没有头标签 &lt;!DOCTYPE html&gt;，向后兼容模式</span></span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                x: <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">                y: <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                x: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">                y: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取元素样式</p><p><code>getComputedStyle(element,null)   //获取元素样式表</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getComputedStyle(element, <span class="literal">null</span>)<span class="comment">//获取样式表</span></span><br><span class="line"><span class="comment">//a.第二个参数可以传 after/before (获取伪元素)</span></span><br><span class="line"><span class="comment">//b.是经过计算的最终值</span></span><br><span class="line"><span class="comment">//c.该方法只能读取，不能写入</span></span><br><span class="line"><span class="comment">//d.IE8 一下不兼容</span></span><br><span class="line"><span class="comment">//封装一个兼容的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>)[prop]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>eval</p><p><code>eval(String)</code>                                                执行一个字符串表达式，并返回表达式的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">"document.write('123')"</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我坐在树下，等最后一片落叶，就当和你最后的告别&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-Date</title>
    <link href="https://www.buxiaoxing.com/post/5309.html"/>
    <id>https://www.buxiaoxing.com/post/5309.html</id>
    <published>2022-07-28T09:50:51.000Z</published>
    <updated>2022-07-28T09:52:47.058Z</updated>
    
    <content type="html"><![CDATA[<p><strong>世界上有两样东西不可直视，一是太阳，二是人心</strong></p><a id="more"></a><ul><li><p>创建日期对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">Date</span>()<span class="comment">//可以直接返回当前时间</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getDate()                                 <span class="comment">//返回一月中的某一天</span></span><br><span class="line">getDay()                                  <span class="comment">//返回一周中的第几天  0~6   星期天~星期六</span></span><br><span class="line">getMonth()                                <span class="comment">//返回月份 0~11</span></span><br><span class="line">getFullYear()                             <span class="comment">//返回年份</span></span><br><span class="line">getHours()                                <span class="comment">//时</span></span><br><span class="line">getMinutes()</span><br><span class="line">getSeconds()</span><br><span class="line">getMillseconds()</span><br><span class="line">toString()</span><br><span class="line">getTime()                                 <span class="comment">//1970年1月1日至今的毫秒数</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;世界上有两样东西不可直视，一是太阳，二是人心&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-dom</title>
    <link href="https://www.buxiaoxing.com/post/a964.html"/>
    <id>https://www.buxiaoxing.com/post/a964.html</id>
    <published>2022-07-28T09:48:16.000Z</published>
    <updated>2022-07-29T06:43:43.081Z</updated>
    
    <content type="html"><![CDATA[<p><strong>曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候</strong></p><a id="more"></a><blockquote><p><strong>文档（html）对象（节点）模型（文档解析为dom树）</strong></p><p>将html解析成一个个节点对象，配合js语法就能操作html</p><p><strong>不仅 js 能操作 dom ，java、php 都能操作 dom</strong></p></blockquote><ul><li><p>节点的增删改查</p><ul><li><p>查</p><ul><li><p>getElementById()                                              当个对象，因为 id 唯一</p></li><li><p>getElementByTagName()                                  通过标签名，查询节点，类数组，                          <code>getElementByTagName(&#39;*&#39;) 选中所有标签</code></p></li><li><p>getElementByClassName()                               通过类名，查询节点，类数组</p></li></ul></li></ul></li></ul><pre><code>- querySelector()                                                   可以通过 css 选择器的方式选择 dom 元素，当个对象- querySelectorAll()                                                对象数组  **注：querySelector 选中的是副本，员 dom 元素改变，选中副本并不会更新**- document.body                                                    直接选中 body 节点- document.head                                                    直接选中 head 节点**节点**  - parentNode                                                             获取父节点  - ChildNodes                                                              获取子节点数组  - firstChild                                                                   第一个子节点  - lastChild                                                                    最后一个子节点  - nextSibling                                                                下一个兄弟节点  - previousSibling                                                         上一个兄弟节点  - hasChildNodes                                                           判断是否有子节点**元素节点**- parentElement                                                             获取父元素节点</code></pre><ul><li>children                                                                          获取子元素节点数组<ul><li>firstElementChild                                                          第一个元素子节点</li><li>lastElementChild                                                            最后一个元素子节点</li><li>nextElementSibling</li><li>previousElementSibling</li><li>setAttribute(‘id’)                                                               获取属性值</li></ul></li></ul><ul><li><p>改</p><ul><li><p>innerHTML                                                                         标签中的内容，可以使HTML结构</p></li><li><p>setAttribute(‘id’, ‘only’)                                                     设置属性</p></li><li><p>preNode.replaceChild(newNode, oldNode)                  替换 oldNode 并把 oldNode 返回出来</p><p><strong>注意，如果 newNode 也是 preNode 的子节点的话，替换后原来 newNode 节点将会被移除</strong></p></li></ul><ul><li><p>增</p><ul><li><p>createElement(“div”)                                                                  创建一个元素节点</p></li><li><p>createTextNode()                                                                         创建文本节点</p></li><li><p>createCommenNode()                                                                 创建注释节点</p></li><li><p>createdocumentFragment()                                                        创建文档碎片节点</p></li><li><p>preNode.appendChild(node)                                                      在子节点的最后添加节点</p></li><li><p>preNode.insertBefore(a,b)                                                           在 b 节点前插入 a 节点</p><p><strong>注意：如果 a 是 preNode的节点的话，那么插入后，原来 a 节点将会被移除</strong></p></li></ul></li><li><p>删</p><ul><li><p>preNode.removeChild(node)                                                  删除父节点下的一个节点，返还回来</p></li><li><p>node.remove()                                                                                 节点自我删除</p></li></ul></li></ul></li></ul><ul><li>节点的类型<ul><li>元素节点                                         1</li><li>属性节点                                         2</li><li>文本节点                                         3</li><li>注释节点                                         8</li><li>document                                      9</li><li>DocumentFragment                    11</li></ul></li></ul><ul><li>节点的属性<ul><li>nodeName                                     节点标签的名称</li><li>nodeValue                                      节点的值（只有文本节点和注释节点才有）</li><li>nodeType                                        返回每个节点对应的数字</li><li>attributes                                         属性节点类数组</li></ul></li></ul><ul><li><p>节点样式数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classList</span><br><span class="line">add()<span class="comment">//增加样式</span></span><br><span class="line">contain()           <span class="comment">//是否包含样式</span></span><br><span class="line">    remove()            <span class="comment">//移除样式</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改 css 样式</p><p>element.style.属性名 = 属性值                                                      改变查询的是行间样式</p><ul><li>‘-‘链接的属性，改为小驼峰</li><li>float 是保留字，建议 cssFloat</li><li>写入的属性必须是字符串值</li></ul><p><strong>推荐将样式封装到类中，更改样式直接更改 class 就行</strong></p></li></ul><ul><li><p>节点集合</p><ul><li><p>按实时分</p><ul><li>动态集合<ul><li>children</li><li>ChildNode</li><li>getlementByTagName()</li><li>…</li></ul></li><li>静态集合<ul><li>querySelectorAll()   </li></ul></li></ul></li><li><p>按对象分</p><ul><li><p>Nodelist                              能存放所有节点</p><ul><li><p>querySelectorAll()</p></li><li><p>childNodes</p></li><li><p>…</p></li></ul></li><li><p>HTMLConnection              只能存放标签节点</p><ul><li>children</li><li>getElementByTagName</li><li>…</li></ul></li></ul></li></ul></li><li><p>dom 树</p><p><img src="http://img.buxiaoxing.com/uPic/2022/07/28174921-bGhbX3-Iuv5qQ.png" alt="image-20201014103030140"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="浏览器" scheme="https://www.buxiaoxing.com/tags/浏览器/"/>
    
  </entry>
  
</feed>
