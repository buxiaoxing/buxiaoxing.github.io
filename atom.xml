<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布小星的笔记</title>
  <icon>https://www.buxiaoxing.com/assets/img/icon.png</icon>
  <subtitle>写不出惊鸿一场 逃不过碎银几两</subtitle>
  <link href="https://www.buxiaoxing.com/atom.xml" rel="self"/>
  
  <link href="https://www.buxiaoxing.com/"/>
  <updated>2022-07-28T09:52:47.060Z</updated>
  <id>https://www.buxiaoxing.com/</id>
  
  <author>
    <name>布小星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js基础-window</title>
    <link href="https://www.buxiaoxing.com/post/6199.html"/>
    <id>https://www.buxiaoxing.com/post/6199.html</id>
    <published>2022-07-28T09:52:13.000Z</published>
    <updated>2022-07-28T09:52:47.060Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我坐在树下，等最后一片落叶，就当和你最后的告别</strong></p><a id="more"></a><ul><li>定时器<ul><li>setInterval(执行函数，毫秒数)                                        每过多少毫秒执行一次函数，返回该定时器的唯一标识</li><li>clearInterval(timer)                                                          通过唯一标识终止定时器</li><li>setTimeout(函数，毫秒数)                                               过多少毫秒执行函数，只执行一次，返回该定时器唯一标识</li><li>clearTimeout(timer)</li></ul></li></ul><ul><li><p>滚动条</p><p><code>pageXOffset/pageYOffset</code>                                                  查看滚动距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装一个兼容的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageXOffset)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            y: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            y: <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>scoll(x,y)</code>                                让滚动条滚动到指定距离</p><p><code>scollBy(x,y)</code>                            累加滚动距离</p></li><li><p>浏览器窗口大小</p><p><code>innerWidth/innerHeight</code>                            可视区窗口大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &amp;&amp; <span class="built_in">window</span>.innerWidth)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">window</span>.innerWidth,</span><br><span class="line">            y: <span class="built_in">window</span>.innerHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode == <span class="string">'BackCompat'</span>)&#123;<span class="comment">//没有头标签 &lt;!DOCTYPE html&gt;，向后兼容模式</span></span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                x: <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">                y: <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                x: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">                y: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取元素样式</p><p><code>getComputedStyle(element,null)   //获取元素样式表</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getComputedStyle(element, <span class="literal">null</span>)<span class="comment">//获取样式表</span></span><br><span class="line"><span class="comment">//a.第二个参数可以传 after/before (获取伪元素)</span></span><br><span class="line"><span class="comment">//b.是经过计算的最终值</span></span><br><span class="line"><span class="comment">//c.该方法只能读取，不能写入</span></span><br><span class="line"><span class="comment">//d.IE8 一下不兼容</span></span><br><span class="line"><span class="comment">//封装一个兼容的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>)[prop]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>eval</p><p><code>eval(String)</code>                                                执行一个字符串表达式，并返回表达式的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">"document.write('123')"</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我坐在树下，等最后一片落叶，就当和你最后的告别&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-Date</title>
    <link href="https://www.buxiaoxing.com/post/5309.html"/>
    <id>https://www.buxiaoxing.com/post/5309.html</id>
    <published>2022-07-28T09:50:51.000Z</published>
    <updated>2022-07-28T09:52:47.058Z</updated>
    
    <content type="html"><![CDATA[<p><strong>世界上有两样东西不可直视，一是太阳，二是人心</strong></p><a id="more"></a><ul><li><p>创建日期对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">Date</span>()<span class="comment">//可以直接返回当前时间</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getDate()                                 <span class="comment">//返回一月中的某一天</span></span><br><span class="line">getDay()                                  <span class="comment">//返回一周中的第几天  0~6   星期天~星期六</span></span><br><span class="line">getMonth()                                <span class="comment">//返回月份 0~11</span></span><br><span class="line">getFullYear()                             <span class="comment">//返回年份</span></span><br><span class="line">getHours()                                <span class="comment">//时</span></span><br><span class="line">getMinutes()</span><br><span class="line">getSeconds()</span><br><span class="line">getMillseconds()</span><br><span class="line">toString()</span><br><span class="line">getTime()                                 <span class="comment">//1970年1月1日至今的毫秒数</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;世界上有两样东西不可直视，一是太阳，二是人心&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-dom</title>
    <link href="https://www.buxiaoxing.com/post/a964.html"/>
    <id>https://www.buxiaoxing.com/post/a964.html</id>
    <published>2022-07-28T09:48:16.000Z</published>
    <updated>2022-07-28T09:52:47.061Z</updated>
    
    <content type="html"><![CDATA[<p><strong>曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候</strong></p><a id="more"></a><blockquote><p><strong>文档（html）对象（节点）模型（文档解析为dom树）</strong></p><p>将html解析成一个个节点对象，配合js语法就能操作html</p><p><strong>不仅 js 能操作 dom ，java、php 都能操作 dom</strong></p></blockquote><ul><li><p>节点的增删改查</p><ul><li><p>查</p><ul><li><p>getElementById()                                              当个对象，因为 id 唯一</p></li><li><p>getElementByTagName()                                  通过标签名，查询节点，类数组，                          <code>getElementByTagName(&#39;*&#39;) 选中所有标签</code></p></li><li><p>getElementByClassName()                               通过类名，查询节点，类数组</p></li></ul></li></ul></li></ul><pre><code>- querySelector()                                                   可以通过 css 选择器的方式选择 dom 元素，当个对象- querySelectorAll()                                                对象数组  **注：querySelector 选中的是副本，员 dom 元素改变，选中副本并不会更新**- document.body                                                    直接选中 body 节点- document.head                                                    直接选中 head 节点**节点**  - parentNode                                                             获取父节点  - ChildNodes                                                              获取子节点数组  - firstChild                                                                   第一个子节点  - lastChild                                                                    最后一个子节点  - nextSibling                                                                下一个兄弟节点  - previousSibling                                                         上一个兄弟节点  - hasChildNodes                                                           判断是否有子节点**元素节点**- parentElement                                                             获取父元素节点</code></pre><ul><li>children                                                                          获取子元素节点数组<ul><li>firstElementChild                                                          第一个元素子节点</li><li>lastElementChild                                                            最后一个元素子节点</li><li>nextElementSibling</li><li>previousElementSibling</li><li>setAttribute(‘id’)                                                               获取属性值</li></ul></li></ul><ul><li><p>改</p><ul><li><p>innerHTML                                                                         标签中的内容，可以使HTML结构</p></li><li><p>setAttribute(‘id’, ‘only’)                                                     设置属性</p></li><li><p>preNode.replaceChild(newNode, oldNode)                  替换 oldNode 并把 oldNode 返回出来</p><p><strong>注意，如果 newNode 也是 preNode 的子节点的话，替换后原来 newNode 节点将会被移除</strong></p></li></ul><ul><li><p>增</p><ul><li><p>createElement(“div”)                                                                  创建一个元素节点</p></li><li><p>createTextNode()                                                                         创建文本节点</p></li><li><p>createCommenNode()                                                                 创建注释节点</p></li><li><p>createdocumentFragment()                                                        创建文档碎片节点</p></li><li><p>preNode.appendChild(node)                                                      在子节点的最后添加节点</p></li><li><p>preNode.insertBefore(a,b)                                                           在 b 节点前插入 a 节点</p><p><strong>注意：如果 a 是 preNode的节点的话，那么插入后，原来 a 节点将会被移除</strong></p></li></ul></li><li><p>删</p><ul><li><p>preNode.removeChild(node)                                                  删除父节点下的一个节点，返还回来</p></li><li><p>node.remove()                                                                                 节点自我删除</p></li></ul></li></ul></li></ul><ul><li>节点的类型<ul><li>元素节点                                         1</li><li>属性节点                                         2</li><li>文本节点                                         3</li><li>注释节点                                         8</li><li>document                                      9</li><li>DocumentFragment                    11</li></ul></li></ul><ul><li>节点的属性<ul><li>nodeName                                     节点标签的名称</li><li>nodeValue                                      节点的值（只有文本节点和注释节点才有）</li><li>nodeType                                        返回每个节点对应的数字</li><li>attributes                                         属性节点类数组</li></ul></li></ul><ul><li><p>节点样式数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classList</span><br><span class="line">add()<span class="comment">//增加样式</span></span><br><span class="line">contain()           <span class="comment">//是否包含样式</span></span><br><span class="line">    remove()            <span class="comment">//移除样式</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改 css 样式</p><p>element.style.属性名 = 属性值                                                      改变查询的是行间样式</p><ul><li>‘-‘链接的属性，改为小驼峰</li><li>float 是保留字，建议 cssFloat</li><li>写入的属性必须是字符串值</li></ul><p><strong>推荐将样式封装到类中，更改样式直接更改 class 就行</strong></p></li></ul><ul><li><p>节点集合</p><ul><li><p>按实时分</p><ul><li>动态集合<ul><li>children</li><li>ChildNode</li><li>getlementByTagName()</li><li>…</li></ul></li><li>静态集合<ul><li>querySelectorAll()   </li></ul></li></ul></li><li><p>按对象分</p><ul><li><p>Nodelist                              能存放所有节点</p><ul><li><p>querySelectorAll()</p></li><li><p>childNodes</p></li><li><p>…</p></li></ul></li><li><p>HTMLConnection              只能存放标签节点</p><ul><li>children</li><li>getElementByTagName</li><li>…</li></ul></li></ul></li></ul></li><li><p>dom 树</p><p><img src="http://img.buxiaoxing.com/uPic/2022/07/28174921-bGhbX3-Iuv5qQ.png" alt="image-20201014103030140"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
    <category term="浏览器" scheme="https://www.buxiaoxing.com/tags/浏览器/"/>
    
  </entry>
  
  <entry>
    <title>js基础-es5.0</title>
    <link href="https://www.buxiaoxing.com/post/894c.html"/>
    <id>https://www.buxiaoxing.com/post/894c.html</id>
    <published>2022-07-28T09:47:07.000Z</published>
    <updated>2022-07-28T09:52:47.062Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我的人生就是一本低俗小说，书里不堪的情节越多，我的观众就越欣喜若狂</strong></p><a id="more"></a><ul><li>es5.0 严格模式启用</li></ul><p>​        逻辑最顶端加上 “use strict”</p><ul><li><p>es5.0 严格模式：当与es3.0冲突时，使用 es5.0 规范</p><ul><li><p><code>arguments.callee</code> 就会报错，<code>caller</code> 也不支持</p></li><li><p>变量必须声明</p></li><li><p>预编译 this 没有指向</p></li></ul></li><li><p>with</p><ul><li><p>with 可以改变作用域链，可以将参数对象变为代码作用域链的最顶端，可以用于命名空间，防止全局污染，节省代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="built_in">document</span>)&#123;</span><br><span class="line">    write(<span class="string">"1"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>缺点：效率低， es5.0 严格模式不支持</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我的人生就是一本低俗小说，书里不堪的情节越多，我的观众就越欣喜若狂&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js基础-try-catch</title>
    <link href="https://www.buxiaoxing.com/post/e5b9.html"/>
    <id>https://www.buxiaoxing.com/post/e5b9.html</id>
    <published>2022-07-28T09:45:48.000Z</published>
    <updated>2022-07-28T09:52:47.063Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一个人自以为刻骨铭心的回忆，别人也许早已经 忘记了</strong></p><a id="more"></a><ul><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//要报错的语句</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.name+<span class="string">","</span>+e.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  在 try 中发生错误，不会再执行 try 后面的语句，转而执行 catch 语句，不会让程序终止</p><ul><li>报错类型<ul><li><code>EvalError</code>                         eval() 的使用和定义不一致</li><li><code>RangeError</code>                      数组越界</li><li><code>ReferenceError</code>              非法或不能识别的引用数值</li><li><code>SynaxError</code>                       发生语法错误</li><li><code>TypeError</code>                         操作数类型错误</li><li><code>URIError</code>                            URI 处理函数不当</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;一个人自以为刻骨铭心的回忆，别人也许早已经 忘记了&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
    <category term="error" scheme="https://www.buxiaoxing.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>js基础-数组</title>
    <link href="https://www.buxiaoxing.com/post/7101.html"/>
    <id>https://www.buxiaoxing.com/post/7101.html</id>
    <published>2022-07-28T09:44:19.000Z</published>
    <updated>2022-07-28T09:52:47.064Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我渴望能见你一面，但我清楚的知道，唯有你也想见我的时候，我们的见面才有意义</strong></p><a id="more"></a><ul><li><p>数组的定义方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4];</span><br><span class="line">var arr = new Array(1,2,3,4);</span><br><span class="line">两种方法创建的对象没有区别</span><br></pre></td></tr></table></figure><p><strong>注: new array(2)</strong><br>里面只有一个参数代表创建数组的长度</p></li><li><p>数组常用方法</p><ul><li><p>能改变原数组的  </p><ul><li><p>push()<br><code>在数组最后添加元素，多个参数依次添加到最后，返回数组长度</code></p></li><li><p>pop()<br><code>取出数组的最后一位元素，并返回该元素</code></p></li><li><p>unshift()  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = [],</span><br><span class="line">arr.unshift(1,2,3)    -&gt;  [1,2,3]而不是[3,2,1]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>- shift()    取出数组第一个元素，并返回该元素- reverse()    `原数组倒序，并返回该数组 `- sort()       升序排序，返回原数组  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以自定义排序规则</span></span><br><span class="line"><span class="comment">//1. 必须写两个形参，第一个参数代表前面的数，第二个参数代表后面的数</span></span><br><span class="line"><span class="comment">//2. 返回值为正，后面的数在前面(换位)；返回值为负，前面的数在前面（不动）；0，不动</span></span><br><span class="line">sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b<span class="comment">//升序</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Math</span>.random() - <span class="number">0.5</span>)<span class="comment">//乱序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>- splice(从第几位开始，[截取长度], [在切口处添加新数据])                 --&gt;     返回截取数组，原数组改变  可以使截取长度为0，当做插入方法使用  开始位数可以使用负数        `位数 += 位数 &gt; 0 ? 0:length`</code></pre><ul><li><p>不能改变原数组的方法</p><ul><li><p>concat                链接两个数组，返回一个新数组</p><p><code>var arr = arr1.concat(arr2)</code></p></li><li><p>join( [以什么字符链接] )               将数组中的所有元素放入字符串，默认分隔符为逗号</p></li><li><p>slice( 从该位开始截取, [截取到改位])                 返回截取的数组，不改变原数组</p></li><li><p><code>filter</code></p><blockquote><p>过滤，返回过滤后的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function"><span class="params">n</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n&lt;=<span class="number">2</span><span class="comment">//参数：回调函数必须返回一个 boolean 值</span></span><br><span class="line">    <span class="comment">//true会添加到返回数组中，false不会添加到返回数组中</span></span><br><span class="line">&#125;)<span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- `map`  &gt; 遍历每个数组元素，返回新数组  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = arr.map(<span class="function"><span class="params">n</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span><span class="comment">//回调函数返回一个数组元素</span></span><br><span class="line">&#125;)<span class="comment">//[2,4,6,8]</span></span><br></pre></td></tr></table></figure>- `reduce`  &gt; 汇总  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>&#123;<span class="comment">//回调函数有两个参数</span></span><br><span class="line">    <span class="keyword">return</span> n1+n2<span class="comment">//参数1：上次回调参数返回的值（第一次调用则是数组首个元素）</span></span><br><span class="line">&#125;)<span class="comment">//参数2：数组第二个元素向后遍历</span></span><br><span class="line"><span class="comment">//10</span></span><br></pre></td></tr></table></figure>- `forEach`  &gt; 遍历每个数组元素，与map相比不会返回新数组- `find`    &gt; 返回符合测试函数条件的第一个元素    和 `filter` 相比， `filter` 返回的是所有符合测试函数条件的数组    而 `find()` 只是返回 `filter` 数组的第一个元素    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'alice'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">'女'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'jack'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">'男'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'bob'</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = arr.find(<span class="function"><span class="params">element</span> =&gt;</span> (age &lt;= <span class="number">20</span>))</span><br><span class="line"><span class="comment">//&#123;name: 'alice', age: 20, sex: '女'&#125;</span></span><br></pre></td></tr></table></figure>- `every`    &gt; 测试一个数组里所有元素是否都能通过测试，都满足才返回true，否则返回false    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = arr.every(<span class="function">(<span class="params">item</span>)=&gt;</span>item&lt;<span class="number">40</span>)</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>类数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'length'</span>: <span class="string">'3'</span>,</span><br><span class="line">    <span class="string">'splice'</span>: <span class="string">'Array.prototype.splice'</span>,</span><br><span class="line">    <span class="string">'push'</span>: <span class="string">'Array.prototype.push'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>索引必须是数字</li><li>必须有<code>length</code>属性</li><li>最好加上 <code>push</code></li><li>类数组拥有数组和对象的特性</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我渴望能见你一面，但我清楚的知道，唯有你也想见我的时候，我们的见面才有意义&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js" scheme="https://www.buxiaoxing.com/tags/js/"/>
    
    <category term="数组" scheme="https://www.buxiaoxing.com/tags/数组/"/>
    
  </entry>
  
  <entry>
    <title>js基础-this</title>
    <link href="https://www.buxiaoxing.com/post/cf5e.html"/>
    <id>https://www.buxiaoxing.com/post/cf5e.html</id>
    <published>2022-07-28T09:40:56.000Z</published>
    <updated>2022-07-28T09:52:47.063Z</updated>
    
    <content type="html"><![CDATA[<p><strong>心若没有栖息的地方，到哪里都是流浪</strong></p><a id="more"></a><ul><li><p>判断this指向</p><ul><li>预编译中this指向window</li><li>全局作用域里this指向window</li><li>call/apply改变this指向</li><li>obj.方法()，谁调用方法，方法中的this就指向谁</li></ul></li><li><p>常出现this指向错误的地方</p><ul><li><p>事件里调用外部变量、函数<br><strong>事件里的this指向的是事件dom元素</strong><br><strong>解决：将外部的this保存在一个变量里</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.oGo.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.style.display = <span class="string">"none"</span>;</span><br><span class="line">    self.flag = <span class="literal">true</span>;</span><br><span class="line">    self.move();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>作为函数参数传入</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;心若没有栖息的地方，到哪里都是流浪&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>ji基础-枚举</title>
    <link href="https://www.buxiaoxing.com/post/91c7.html"/>
    <id>https://www.buxiaoxing.com/post/91c7.html</id>
    <published>2022-07-28T09:38:58.000Z</published>
    <updated>2022-07-28T09:52:47.064Z</updated>
    
    <content type="html"><![CDATA[<p><strong>或许你会想起我，像想起一朵永不重开的花朵</strong></p><a id="more"></a><ul><li><p>for in 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    obj[prop];      <span class="comment">//prop就是每个属性的属性名，字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>遍历对象，会遍历原型链上的属性，但不会延展到Object</strong></p><ul><li><p>hasOwnProperty()</p><p>对象.hasOwnProperty(属性)，判断该属性是不是对象上的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(prop))&#123;</span><br><span class="line">        obj[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>这样就只会遍历对象自身的对象，而不会遍历原型链上的属性</strong></p><ul><li><p>in 操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//"属性" in 对象      -&gt;      判断对象能否调用该属性，返还一个boolean值</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>instanceof</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A instanceof B          -&gt;          A对象的原型链上有没有B的原型，返回一个boolean值</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;或许你会想起我，像想起一朵永不重开的花朵&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-命名空间</title>
    <link href="https://www.buxiaoxing.com/post/bbef.html"/>
    <id>https://www.buxiaoxing.com/post/bbef.html</id>
    <published>2022-07-28T09:38:00.000Z</published>
    <updated>2022-07-28T09:52:47.062Z</updated>
    
    <content type="html"><![CDATA[<p><strong>等到空洞的躯壳上生满了野草，你才想起那被你揉成废纸般丢弃的灵魂</strong></p><a id="more"></a><ul><li><p>命名空间的作用</p><p>防止污染全局变量</p></li><li><p>命名空间的实现方式</p><ul><li>对象<br>将一个功能封装到一个对象中，调用的话对象.属性</li><li>闭包<br>将功能封装到函数中，最后返回一个函数作为接口</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;等到空洞的躯壳上生满了野草，你才想起那被你揉成废纸般丢弃的灵魂&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-继承</title>
    <link href="https://www.buxiaoxing.com/post/61e8.html"/>
    <id>https://www.buxiaoxing.com/post/61e8.html</id>
    <published>2022-07-27T17:10:07.000Z</published>
    <updated>2022-07-27T17:13:32.456Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一想到终将是你的路人，便觉得，沦为整个世界的路人。风虽大，却都绕过我灵魂</strong></p><a id="more"></a><ul><li><p>原型链模式(传统模式)</p><p>继承了太多容余属性</p></li><li><p>共有原型    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多个对象的原型指向同一对象</span></span><br><span class="line">Father.prototype = obj;</span><br><span class="line">Son.prototype = obj;</span><br><span class="line"><span class="comment">//链型结构      --&gt;         树形结构</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,origin</span>)</span>&#123;</span><br><span class="line">    Target.prototype = Origin.prototype</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>缺点：单独修改一个构造函数的原型另一个构造函数的原型也会受影响</strong></p><ul><li><p>圣杯模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    f.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> f();             <span class="comment">//Target的constructor默认指向Origin</span></span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;   <span class="comment">//设置一个属性，可以查看真实原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        Target.prototype.constructor = Target;</span><br><span class="line">        Target.prototype.uber = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;一想到终将是你的路人，便觉得，沦为整个世界的路人。风虽大，却都绕过我灵魂&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="原型" scheme="https://www.buxiaoxing.com/tags/原型/"/>
    
  </entry>
  
  <entry>
    <title>serverless部署hexo博客，免费托管在腾讯云上</title>
    <link href="https://www.buxiaoxing.com/post/5b43.html"/>
    <id>https://www.buxiaoxing.com/post/5b43.html</id>
    <published>2022-07-27T09:50:14.000Z</published>
    <updated>2022-07-27T10:24:02.595Z</updated>
    
    <content type="html"><![CDATA[<p><strong>岁月不堪数，故人不如初</strong></p><a id="more"></a><h3 id="安装serverless插件"><a href="#安装serverless插件" class="headerlink" title="安装serverless插件"></a>安装serverless插件</h3><p><code>npm install -g serverless</code></p><h3 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h3><ul><li><p>首先需要注册登陆腾讯云</p></li><li><p>进入<a href="https://console.cloud.tencent.com/cos/bucket" target="_blank" rel="noopener">对象存储控制台</a></p></li><li><p>创建存储桶</p><ul><li>名称自定义</li><li>地域随便选</li><li>访问权限选择 <strong>公有读私有写</strong></li><li>一直下一步到创建成功</li></ul><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27175817-F0SF6b-image-20220727175816595.png" alt="image-20220727175816595"></p></li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><p>在hexo项目根目录下新建 <code>serverless.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># serverless.yml</span></span><br><span class="line"><span class="attr">component:</span> <span class="string">website</span> <span class="comment"># (必填) 引用 component 的名称，当前用到的是 tencent-website 组件</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">hexoComponent</span> <span class="comment"># (必填) 该 website 组件创建的实例名称</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">websiteApp</span> <span class="comment"># (可选) 该 website 应用名称</span></span><br><span class="line"><span class="attr">stage:</span> <span class="string">dev</span> <span class="comment"># (可选) 用于区分环境信息，默认值是 dev</span></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line"> <span class="attr">src:</span></span><br><span class="line">   <span class="attr">src:</span> <span class="string">./public</span> <span class="comment"># Upload static files generated by HEXO</span></span><br><span class="line">   <span class="attr">index:</span> <span class="string">index.html</span></span><br><span class="line">   <span class="comment"># dist: ./dist</span></span><br><span class="line">   <span class="comment"># hook: npm run build</span></span><br><span class="line">   <span class="comment"># websitePath: ./</span></span><br><span class="line"> <span class="attr">region:</span> <span class="string">ap-guangzhou</span> <span class="comment"># 创建存储桶时选的地域</span></span><br><span class="line"> <span class="attr">bucketName:</span> <span class="string">my-bucket</span> <span class="comment"># 创建存储桶写的名称</span></span><br><span class="line"> <span class="attr">protocol:</span> <span class="string">https</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>输入命令<code>serverless deploy</code></p><p>中间可能要微信扫描授权</p></li><li><p>部署成功</p><p> <img src="http://img.buxiaoxing.com/uPic/2022/07/27180748-R8osow-image-20220727180746385.png" alt="image-20220727180746385"></p><p>存储桶的文件列表应该也有了你传上去的文件</p></li></ul><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27181037-HDJtZn-image-20220727181035665.png" alt="image-20220727181035665"></p><p>基础配置中的静态网站，复制访问节点的url在浏览器中访问</p><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27181200-vTe12C-image-20220727181158390.png" alt="image-20220727181158390"></p><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27182200-MxurZP-image-20220727182158361.png" alt="image-20220727182158361"></p><ul><li>这里可以添加需要自定义的域名</li><li>然后到域名服务商那里新增解析记录，指向这里的CNAME值</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;岁月不堪数，故人不如初&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://www.buxiaoxing.com/tags/hexo/"/>
    
    <category term="后端" scheme="https://www.buxiaoxing.com/tags/后端/"/>
    
    <category term="部署" scheme="https://www.buxiaoxing.com/tags/部署/"/>
    
    <category term="serverless" scheme="https://www.buxiaoxing.com/tags/serverless/"/>
    
  </entry>
  
  <entry>
    <title>hexo-yilia主题支持twikoo评论系统</title>
    <link href="https://www.buxiaoxing.com/post/c831.html"/>
    <id>https://www.buxiaoxing.com/post/c831.html</id>
    <published>2022-07-27T09:34:11.000Z</published>
    <updated>2022-07-27T11:49:25.549Z</updated>
    
    <content type="html"><![CDATA[<p><strong>他们看过花海又忘记花海，辜负深红浅白</strong></p><a id="more"></a><p> <a href="https://github.com/buxiaoxing/yilia-more" target="_blank" rel="noopener">yilia-more</a> 已经增加对 <a href="https://twikoo.js.org/" target="_blank" rel="noopener">twikoo</a> 的支持</p><h3 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h3><ol><li><p><code>layout/_partial/post</code> 路径下新建 <code>twikoo.ejs</code>，添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;tcomment&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/twikoo/1.5.11/twikoo.all.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">twikoo.init(&#123;</span><br><span class="line">  envId: &apos;&lt;%= theme.twikoo.envId %&gt;&apos;, // 腾讯云环境填 envId；Vercel 环境填地址（https://xxx.vercel.app）</span><br><span class="line">  el: &apos;#tcomment&apos;, // 容器元素</span><br><span class="line">  // region: &apos;ap-guangzhou&apos;, // 环境地域，默认为 ap-shanghai，腾讯云环境填 ap-shanghai 或 ap-guangzhou；Vercel 环境不填</span><br><span class="line">  // path: location.pathname, // 用于区分不同文章的自定义 js 路径，如果您的文章路径不是 location.pathname，需传此参数</span><br><span class="line">  // lang: &apos;zh-CN&apos;, // 用于手动设定评论区语言，支持的语言列表 https://github.com/imaegoo/twikoo/blob/main/src/js/utils/i18n/index.js</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>layout/_partial/article.ejs</code> 底部增加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- twikoo评论系统 --&gt;</span><br><span class="line">&lt;% if (theme.twikoo &amp;&amp; theme.twikoo.enable &amp;&amp; theme.twikoo.envId)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&apos;post/twikoo&apos;, &#123;</span><br><span class="line">        key: post.slug,</span><br><span class="line">        title: post.title,</span><br><span class="line">        url: config.url+url_for(post.path)</span><br><span class="line">        &#125;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>_config.yml</code> 增加 <code>twikoo</code> 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">envId:</span>  <span class="comment"># 环境id</span></span><br></pre></td></tr></table></figure></li><li><p>打包</p><p><code>npm run dist</code></p></li></ol><h3 id="envId-获取"><a href="#envId-获取" class="headerlink" title="envId 获取"></a>envId 获取</h3><p><a href="https://twikoo.js.org/quick-start.html#%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2" target="_blank" rel="noopener">云函数手动部署</a></p><h3 id="邮件提醒设置"><a href="#邮件提醒设置" class="headerlink" title="邮件提醒设置"></a>邮件提醒设置</h3><ul><li><p><a href="https://twikoo.js.org/faq.html#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF%E7%9A%84%E7%A7%81%E9%92%A5%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">进入twikoo管理面板</a></p></li><li><p>配置管理-&gt;邮件通知</p><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27194814-gkhdfw-image-20220727194812477.png" alt="image-20220727194812477"></p></li><li><p>配置管理–&gt;邮件通知测试</p><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27194914-sTZvDN-image-20220727194913301.png" alt="image-20220727194913301"></p><p>测试成功通过就配置成功了</p></li></ul><h3 id="博主标识设置"><a href="#博主标识设置" class="headerlink" title="博主标识设置"></a>博主标识设置</h3><ul><li><p><a href="https://twikoo.js.org/faq.html#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF%E7%9A%84%E7%A7%81%E9%92%A5%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">进入twikoo管理面板</a></p></li><li><p>配置管理-&gt;通用</p><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27194622-4laetf-image-20220727194621125.png" alt="image-20220727194621125"></p></li><li><p>保存</p></li></ul><h3 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h3><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27175253-h5Nkw0-image-20220727175251903.png" alt="image-20220727175251903"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;他们看过花海又忘记花海，辜负深红浅白&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="hexo" scheme="https://www.buxiaoxing.com/tags/hexo/"/>
    
    <category term="yilia" scheme="https://www.buxiaoxing.com/tags/yilia/"/>
    
    <category term="twikoo" scheme="https://www.buxiaoxing.com/tags/twikoo/"/>
    
  </entry>
  
  <entry>
    <title>js基础-call和apply</title>
    <link href="https://www.buxiaoxing.com/post/b715.html"/>
    <id>https://www.buxiaoxing.com/post/b715.html</id>
    <published>2022-07-26T17:01:02.000Z</published>
    <updated>2022-07-27T07:02:44.728Z</updated>
    
    <content type="html"><![CDATA[<p><strong>少年心动，是仲夏夜的荒原，割不完，烧不尽，长风一吹，野草就连了天</strong></p><a id="more"></a><ul><li><p>call apply的作用</p><p>改变this指向</p></li><li><p>call</p><ul><li><p>每个函数执行时都会都会调用call<br><code>test();        -&gt;      test.call();</code></p></li><li><p>call里面第一参数是方法this的指向，后面的参数是方法的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">Person.call(obj,&apos;zs&apos;,24)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>call 与 apply 的区别</p><p>apply的实参列表必须是数组<br><code>Person.apply(obj,[&#39;zs&#39;,24])</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;少年心动，是仲夏夜的荒原，割不完，烧不尽，长风一吹，野草就连了天&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-原型</title>
    <link href="https://www.buxiaoxing.com/post/c096.html"/>
    <id>https://www.buxiaoxing.com/post/c096.html</id>
    <published>2022-07-26T09:27:45.000Z</published>
    <updated>2022-07-26T09:32:28.394Z</updated>
    
    <content type="html"><![CDATA[<p><strong>只是这一生冗长，我再难与你相见，难免哽咽</strong></p><a id="more"></a><ul><li><p>原型定义</p><blockquote><p><strong>原型是function对象的一个属性，它定义了构造函数造出对象的公共祖先。</strong><br><strong>通过该构造函数产生的对象，可以继承该原型的属性和方法。原型也是对象。</strong></p></blockquote></li><li><p>查看原型</p><p>隐式属性: <code>__proto__</code></p></li><li><p>查看对象的构造函数</p><p><code>constructor</code></p></li><li><p>访问一个属性，如果对象中没有，则去原型中找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line">Person.prototype    -&gt;  原型</span><br><span class="line">new.Person.__proto__    -&gt;  原型</span><br></pre></td></tr></table></figure></li></ul><p>  创建对象隐式调用了</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var this = &#123;__proto__:Person.prototype&#125;</span><br></pre></td></tr></table></figure><ul><li><p>原型上有两个默认的属性</p><ul><li>constructor 构造函数</li><li><code>__proto__</code>原型的原型</li></ul></li><li><p>Object.prototype是最终原型</p><ul><li>Object 是构造函数</li><li>Object.prototype 是一个对象</li></ul></li><li><p>对象.方法()</p><p>方法里面的this指向调用对象</p></li><li><p>Object.create() 创建对象</p><p><code>var obj = Object.create(原型)</code></p></li><li><p>绝大多数对象最终都继承自Object.prototype</p><p>Object.create(null) 创建的对象没有原型</p></li><li><p>undefined.toString();null.toString()</p><p>报错，因为undefined和null原型链上没有Object.prototype</p></li><li><p>原型.方法.call(对象)</p><blockquote><p>指定对象调用原型上的方法</p></blockquote></li><li><p>document.write()会隐式的调用toString方法</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;只是这一生冗长，我再难与你相见，难免哽咽&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="原型" scheme="https://www.buxiaoxing.com/tags/原型/"/>
    
  </entry>
  
  <entry>
    <title>js基础-对象</title>
    <link href="https://www.buxiaoxing.com/post/a32d.html"/>
    <id>https://www.buxiaoxing.com/post/a32d.html</id>
    <published>2022-07-26T09:18:49.000Z</published>
    <updated>2022-07-26T09:59:55.233Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我不遗憾啊，我怎么会遗憾</strong></p><a id="more"></a><ul><li><p>对象的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var 对象名 = &#123;</span><br><span class="line">属性名1:属性值2,</span><br><span class="line">属性名2:属性值2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值可以为任何类型的数据，当是函数的时候称为方法</strong><br><strong>注意：对象属性名不能重复</strong></p></li><li><p>对象的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">增：对象名.属性名 = 属性值</span><br><span class="line">查：对象名.属性名或者对象名[&quot;属性名&quot;]</span><br><span class="line">改：对象名.属性名 = 属性值</span><br><span class="line">删：delete 对象名.属性名</span><br><span class="line">  var 出来的属性删除不掉，</span><br><span class="line">  var a = &apos;123&apos;</span><br><span class="line">  delete window.a-&gt;false</span><br><span class="line">  window.a = 123</span><br><span class="line">  delete window.a-&gt;true</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>对象创建的不同方法</p><ul><li><p>对象字面量<br><code>var obj = {}</code></p></li><li><p>构造函数(创建出来的对象都是独立的)</p><ul><li><p>系统自带构造函数<br><code>var obj = new Object()</code></p></li><li><p>自定义构造函数  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与函数一样，但命名大驼峰式(每个单词的首字母大写，从第一个单词开始)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color</span>)</span>&#123;<span class="comment">//构造函数可以有参数，如果创建对象的时候没有传参数，该参数为undefined</span></span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"BMW"</span><span class="comment">//设置属性方法，this.属性 = 属性值;</span></span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">'red'</span>);<span class="comment">//创建对象的时候指定参数</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>**构造函数内部原理**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) 在函数体最前面隐式的加上this=&#123;&#125;</span><br><span class="line">(2) 执行this.xxx = xxx;</span><br><span class="line">(3) 隐式的返回this;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>包装类</p><blockquote><p>原始值是不能有属性和方法的<br>当原始值调用对象属性方法时，并不会报错，中间经历了一个包装类的过程</p></blockquote><p><img src="http://img.buxiaoxing.com/uPic/2022/07/26172549-v7OsLd-image-20220726172547421.png" alt="image-20220726172547421"></p></li><li><p>对象调用属性的方法</p><ul><li><code>对象.属性</code></li><li><code>对象[&quot;属性&quot;]</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我不遗憾啊，我怎么会遗憾&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-作用域与预编译</title>
    <link href="https://www.buxiaoxing.com/post/1ae0.html"/>
    <id>https://www.buxiaoxing.com/post/1ae0.html</id>
    <published>2022-07-26T09:16:33.000Z</published>
    <updated>2022-07-26T09:29:09.706Z</updated>
    
    <content type="html"><![CDATA[<p><strong>要知道那是最后一次见面，我就穿好看点了</strong></p><a id="more"></a><ul><li><p>作用域定义</p><p>变量和函数生效(能被访问)的区域<br>里面的能访问外面的，外面的不能访问里面的</p><ul><li><p>js运行三部曲</p><ol><li><p>语法分析<br>检测低级语法错误</p></li><li><p>预编译  </p><p>函数 - &gt;整体提升</p><p>变量 - &gt;声明提升</p></li><li><p>解释执行<br>执行的时候就不用看提升了的部分，直接访问AO</p></li></ol></li></ul></li><li><p>imply global(暗示全局变量)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     任何变量，如果变量未经声明就赋值，此变量为全局对象所有(归window所有)</span><br><span class="line">所有声明的全局变量都归window所有，window就是全局。</span><br><span class="line">function test()&#123;</span><br><span class="line">var a=b=1;</span><br><span class="line">//b就是暗示全局变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>预编译四部曲</p><ol><li>创建AO对象（执行期上下文，作用域）</li><li>找形参和参数变量，将变量和形参作为AO属性名，值为undefined</li><li>将实参值和形参统一</li><li>在函数体里找到函数声明，函数名作为AO属性名，属性值赋予函数体</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行的时候就去AO中取</span><br><span class="line">函数的预编译就是AO，全局的预编译是GO</span><br><span class="line">先生成GO再生成AO</span><br><span class="line">AO生成于函数执行的前一刻</span><br></pre></td></tr></table></figure></li></ul><ul><li>[[scope]]<ul><li>含义  <ul><li>每个javascript函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性仅供<br>javascript引擎存取，[[scope]]就是其中一个。  </li><li>[[scope]]指的就是我们所说的作用域链，其中存储了执行期上下文(作用域)的集合;  </li><li>每个函数定义时的[[scope]]等于上一级函数的执行时的[[scope]]<br>函数执行时，会在[[scope]]顶部加上自己的AO<br>函数执行完毕的时候销毁自己的AO</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;要知道那是最后一次见面，我就穿好看点了&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="作用域" scheme="https://www.buxiaoxing.com/tags/作用域/"/>
    
  </entry>
  
  <entry>
    <title>js基础-函数</title>
    <link href="https://www.buxiaoxing.com/post/5af6.html"/>
    <id>https://www.buxiaoxing.com/post/5af6.html</id>
    <published>2022-07-26T09:15:08.000Z</published>
    <updated>2022-07-26T09:30:26.375Z</updated>
    
    <content type="html"><![CDATA[<p><strong>只要一想起一生中后悔的事，梅花便落满了南山</strong></p><a id="more"></a><ul><li><p>定义函数</p><ul><li><p>函数声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line"> 函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数表达式(匿名函数表达式)</p><p><code>var 函数名 = function(){函数体}</code></p></li></ul><p><strong>区别</strong></p><ul><li>函数表达式可以直接加()执行</li><li>函数声明整体提前，函数表达式声明提前</li></ul></li><li><p>调用函数</p><p><code>函数名()</code></p></li><li><p>参数</p><ul><li><p>js不定参数  </p><ul><li>形参个数&gt;实参个数<br>后面的参数为undefined</li><li>实参个数&gt;形参个数<br>只取前面的形参</li></ul></li><li><p>函数名.length     -&gt;      形参个数</p></li><li><p>aguments  实参列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">里面装有所有的实参，就算这个实参没有被接收(实参个数&gt;形参个数)</span><br><span class="line">aguments.callee返回函数引用</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>return <ul><li>终止函数</li><li>返回值 -&gt; 将值返回到函数外部</li></ul></li><li>递归<ul><li>找规律</li><li>找出口<br><strong>递归只能让代码更简洁，空间时间复杂度更高</strong></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;只要一想起一生中后悔的事，梅花便落满了南山&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-typeof与类型转化</title>
    <link href="https://www.buxiaoxing.com/post/e2f7.html"/>
    <id>https://www.buxiaoxing.com/post/e2f7.html</id>
    <published>2022-07-26T08:37:50.000Z</published>
    <updated>2022-07-26T09:29:29.047Z</updated>
    
    <content type="html"><![CDATA[<p><strong>是谁多事种了芭蕉，风也萧萧，雨也萧萧。是君心绪太无聊，种了芭蕉，又怨芭蕉</strong></p><a id="more"></a><ol><li><p>typeof(数据)</p><ul><li><p>返回数据类型<br><code>number string object boolean undefined function</code></p></li><li><p>typeof(未定义的变量，定义未赋值的变量)  -&gt;  undefined</p></li><li><p>返回的字符串</p></li></ul></li><li><p>Number(数据) -&gt; 将数据转化为number类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Number(true)-&gt;1</span><br><span class="line">Number(null)-&gt;0</span><br><span class="line">Number(undefined)-&gt; NaN</span><br><span class="line">Number(&quot;a&quot;)-&gt;NaN</span><br><span class="line">Number(&quot;11a&quot;)-&gt;NaN</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>parseInt(数据,[进制]) -&gt; 将数据化为整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parseInt(true)-&gt;NaN</span><br><span class="line">parseInt(null)-&gt;NaN</span><br><span class="line">parseInt(undefined)-&gt; NaN</span><br><span class="line">parseInt(&quot;a&quot;)-&gt;NaN</span><br><span class="line">parseInt(&quot;11a&quot;)-&gt;11//从不包括小数点数字位看到非数字位</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>parseFloat(数据)    -&gt;  将数据化为浮点数</p><blockquote><p>从包括小数点的数字位看到非数字位</p></blockquote></li><li><p>String(数据)  - &gt; 将数据化为字符串类型</p></li><li><p>Boolean(数据)</p></li><li><p>数据.toString([进制])</p><p>将数据转化为字符串类型(undefined和null不能使用，因为原型上没有Object.prototype，String()都能适用)</p><blockquote><p>parseInt()        目标进制 -&gt; 十进制<br>toString()        十进制   -&gt; 目标进制</p></blockquote></li><li><p>隐式类型转化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">       i.isNaN(数据)</span><br><span class="line">(1).Number(数据)</span><br><span class="line">(2).和NaN比对</span><br><span class="line"></span><br><span class="line">ii.a+++a-a ++a a-- --a</span><br><span class="line">(1).Number(a)</span><br><span class="line">(2).a++</span><br><span class="line">iii.- * / %</span><br><span class="line">(1).Number()</span><br><span class="line">(2).运算</span><br><span class="line">iiii.+</span><br><span class="line">计算到字符串时字符串链接</span><br><span class="line">boolean+number = Number(boolean)+number</span><br><span class="line">|| &amp;&amp; !</span><br><span class="line">自动转化为boolean值</span><br><span class="line">== !=</span><br><span class="line">自动类型转化</span><br><span class="line">&gt; &lt; a.字符串与number比，字符串-&gt;number，比较值</span><br><span class="line">b.数字与boolean比较，boolean--&gt;number</span><br><span class="line">c.字符串与字符串比较第一位ASCII值</span><br><span class="line">d.其他比较都返回false</span><br><span class="line"></span><br><span class="line">NaN == NaN-&gt;false</span><br><span class="line">NaN与任何值比较都返回false</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>不发生类型转化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">===         !==</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;是谁多事种了芭蕉，风也萧萧，雨也萧萧。是君心绪太无聊，种了芭蕉，又怨芭蕉&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="类型" scheme="https://www.buxiaoxing.com/tags/类型/"/>
    
  </entry>
  
  <entry>
    <title>js基础-条件循环语句</title>
    <link href="https://www.buxiaoxing.com/post/9bb8.html"/>
    <id>https://www.buxiaoxing.com/post/9bb8.html</id>
    <published>2022-07-26T08:35:53.000Z</published>
    <updated>2022-07-26T09:30:07.209Z</updated>
    
    <content type="html"><![CDATA[<p><strong>迎面走来一个很像你的人，我期待是你，又害怕是你，在看清不是你之后，庆幸不是你，又遗憾不是你</strong></p><a id="more"></a><ul><li><p>条件语句</p><p>if/else</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(条件1)&#123;</span><br><span class="line">    满足条件执行的语句</span><br><span class="line">&#125;else if(条件2)&#123;</span><br><span class="line">    满足条件2执行的语句</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    上面条件都不满足才会执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>else if 条件互斥时才能使用</strong></p><p>  switch</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">switch(value)&#123;</span><br><span class="line">case 1:</span><br><span class="line">语句1;</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">语句2;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">语句3;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">都不满足输出的语句;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>循环</p><ul><li><p>for</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">for(1;2;3)&#123;</span><br><span class="line">循环语句</span><br><span class="line">&#125;</span><br><span class="line">for循环执行顺序</span><br><span class="line">先执行一遍1;</span><br><span class="line">判断2执行语句</span><br><span class="line">执行3</span><br><span class="line">判断2执行语句</span><br><span class="line">执行3</span><br><span class="line">....</span><br><span class="line">2为false时终止程序</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>while</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   while(条件)&#123;</span><br><span class="line">循环语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do&#123;</span><br><span class="line">循环语句</span><br><span class="line">&#125;while(条件)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>break,continue  </p><ul><li>break:跳出循环(多个循环，跳出最近的循环)</li><li>continue:跳出本次循环，不执行后面的语句，直接开始下一次循环</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;迎面走来一个很像你的人，我期待是你，又害怕是你，在看清不是你之后，庆幸不是你，又遗憾不是你&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-运算符</title>
    <link href="https://www.buxiaoxing.com/post/5fde.html"/>
    <id>https://www.buxiaoxing.com/post/5fde.html</id>
    <published>2022-07-26T08:34:56.000Z</published>
    <updated>2022-07-26T09:29:39.539Z</updated>
    
    <content type="html"><![CDATA[<p><strong>后来我才知道，她不是我的花，但能途径她的盛放，我不胜荣幸</strong></p><a id="more"></a><ul><li><p>算术运算符</p><ul><li><p><code>+</code></p><ul><li>数值相加</li><li>字符串链接(任意 + 字符串 = 字符串)</li></ul></li><li><p><code>-</code></p></li><li><p><code>*</code></p></li><li><p><code>/</code></p></li><li><p><code>%</code> 取余</p></li><li><p><code>+= -= *= /= %= ++ --...</code></p></li><li><p>交换两个变量的值</p><ol><li><p>引入第三个变量  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 123;</span><br><span class="line">var b = 234;</span><br><span class="line">var c = a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><pre><code>2. 算术运算   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a=123;</span><br><span class="line">var b=234;</span><br><span class="line">a=a+b;</span><br><span class="line">b=a-b;</span><br><span class="line">a=a-b;</span><br></pre></td></tr></table></figure></code></pre><ul><li>比较运算符</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;后来我才知道，她不是我的花，但能途径她的盛放，我不胜荣幸&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
</feed>
