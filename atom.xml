<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布小星的笔记</title>
  <icon>https://www.buxiaoxing.com/assets/img/icon.png</icon>
  <subtitle>写不出惊鸿一场 逃不过碎银几两</subtitle>
  <link href="https://www.buxiaoxing.com/atom.xml" rel="self"/>
  
  <link href="https://www.buxiaoxing.com/"/>
  <updated>2022-07-29T09:10:18.587Z</updated>
  <id>https://www.buxiaoxing.com/</id>
  
  <author>
    <name>布小星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux常用命令</title>
    <link href="https://www.buxiaoxing.com/post/767f.html"/>
    <id>https://www.buxiaoxing.com/post/767f.html</id>
    <published>2022-07-29T09:04:55.000Z</published>
    <updated>2022-07-29T09:10:18.587Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Yesterday is history. Tomorrow is a mystery. But today is a gift. That is why it is called the present</strong></p><a id="more"></a><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以超级管理员的身份执行命令</span></span><br><span class="line">sudo ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到root用户</span></span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户</span></span><br><span class="line">who am i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">cat [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p [路径]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">touch [文件名]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件重命名</span></span><br><span class="line">mv [oldName] [newName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件移动（*可以代表当下文件夹下所有文件）</span></span><br><span class="line">mv [from路径] [to路径]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件拷贝</span></span><br><span class="line">cp [from路径] [to路径]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件/目录</span></span><br><span class="line">rm -rf [文件名/目录]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关机</span></span><br><span class="line">shutdown -h now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">shutdown -r now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看注册的命令</span></span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装路径</span></span><br><span class="line"><span class="built_in">where</span> node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个目录切换</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理终端</span></span><br><span class="line">clear </span><br><span class="line">ctrl+L</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Yesterday is history. Tomorrow is a mystery. But today is a gift. That is why it is called the present&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="后端" scheme="https://www.buxiaoxing.com/tags/后端/"/>
    
    <category term="linux" scheme="https://www.buxiaoxing.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>docker基础命令</title>
    <link href="https://www.buxiaoxing.com/post/80e1.html"/>
    <id>https://www.buxiaoxing.com/post/80e1.html</id>
    <published>2022-07-29T08:59:45.000Z</published>
    <updated>2022-07-29T09:02:24.169Z</updated>
    
    <content type="html"><![CDATA[<p><strong>凡是你抗拒的都会持续</strong></p><a id="more"></a><blockquote><p>安装</p><p>镜像 image</p><p>容器 ps</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧版本</span></span><br><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像仓库（不推荐使用官方仓库，速度很慢）</span></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 设置镜像仓库（推荐使用阿里云仓库）</span></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新yum软件包索引</span></span><br><span class="line">$ sudo yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装社区版docker</span></span><br><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">$ sudo docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试运行容器</span></span><br><span class="line">$ sudo docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下载的镜像</span></span><br><span class="line">$ sudo docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启服务</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止docker服务</span></span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载相关依赖</span></span><br><span class="line">$ sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空工作路径</span></span><br><span class="line">$ sudo rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">docker search mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从仓库拉取镜像，docker pull[镜像名]:[版本号(不写默认最新)]</span></span><br><span class="line">docker pull mysql:8.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成镜像</span></span><br><span class="line">docker build -t express-demo .</span><br><span class="line">-t 指定镜像名</span><br><span class="line">. 表示在当前目录的Dockerfile开始构建</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地镜像</span></span><br><span class="line">docker rmi &lt;image&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例并启动容器</span></span><br><span class="line">docker run -p 3307:3306 --name mysql8.0 -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0</span><br><span class="line">--name 指定容器名</span><br><span class="line">-d 后台运行</span><br><span class="line">-p 指定映射端口</span><br><span class="line">-v 指定文件挂载路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在运行的容器 -a 查看所有容器，包括停止了的容器</span></span><br><span class="line">docker ps [-a]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart &lt;容器名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop &lt;container id&gt;/&lt;names&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm &lt;container id&gt;/&lt;names&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以交互模式进入docker容器内部系统操作台</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql8.0 bash</span><br><span class="line"><span class="comment"># 然后登陆mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动已经停止的容器</span></span><br><span class="line">docker start [容器名]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;凡是你抗拒的都会持续&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="后端" scheme="https://www.buxiaoxing.com/tags/后端/"/>
    
    <category term="docker" scheme="https://www.buxiaoxing.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>js基础-js的特点</title>
    <link href="https://www.buxiaoxing.com/post/9f67.html"/>
    <id>https://www.buxiaoxing.com/post/9f67.html</id>
    <published>2022-07-29T06:50:32.000Z</published>
    <updated>2022-07-29T06:50:50.842Z</updated>
    
    <content type="html"><![CDATA[<p><strong>所有值得做的事，做得一团糟也值得做</strong></p><a id="more"></a><blockquote><p>单线程，解释性型语言，即时编译</p></blockquote><ul><li>单线程</li></ul><p>​        同一时间只能做一件事</p><p>​        </p><ul><li><p>编译型语言</p><p>c,  c++</p><ul><li><p>优点：快</p></li><li><p>缺点：移植性不好</p><p><strong>编译所有代码后再执行</strong></p></li></ul></li><li><p>解释型语言</p><p>js、php、python</p><ul><li><p>优点：跨平台</p></li><li><p>缺点：略慢</p><p><strong>解释一行执行一行</strong></p></li></ul></li><li><p>JAVA</p><p>Java既是编译型的，又是解释型的。程序代码经过编译之后转化成一种称为Java字节码的中间语言，java虚拟机(JVM)将对字节码进行解释和执行</p></li><li><p>JS的发展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a(js代码)--&gt;b(字节码)--&gt;c(JS引擎)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;所有值得做的事，做得一团糟也值得做&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-Math</title>
    <link href="https://www.buxiaoxing.com/post/acb.html"/>
    <id>https://www.buxiaoxing.com/post/acb.html</id>
    <published>2022-07-29T06:49:07.000Z</published>
    <updated>2022-07-29T06:49:32.852Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我无法搬动岁月，你披着一身月光，停泊在秋天里</strong></p><a id="more"></a><ul><li>属性<ul><li>Math.PI                    圆周率</li></ul></li></ul><ul><li><p>方法</p><ul><li><p>Math.floor()               向下取整</p><p><code>Math.floor(12.9)            --&gt;        12</code></p></li><li><p>Math.ceil()                  向上取整</p><p><code>Math.ceil(12.1)        --&gt;        13</code></p></li><li><p>Math.round()               四舍五入取整</p></li><li><p>Math.random()            产生一个 0~1 之间的随机数</p></li><li><p>Math.pow(x,y)              x 的 y 次幂</p></li><li><p>Math.sqrt(x)                 x 的平方根</p></li></ul></li></ul><ul><li><p>返回两个数之间的随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myRandom</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n1 = num2 - num1</span><br><span class="line">    <span class="keyword">var</span> n2 = <span class="built_in">Math</span>.random() * n1 + num1</span><br><span class="line">    <span class="keyword">return</span> n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我无法搬动岁月，你披着一身月光，停泊在秋天里&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-正则表达式</title>
    <link href="https://www.buxiaoxing.com/post/cd27.html"/>
    <id>https://www.buxiaoxing.com/post/cd27.html</id>
    <published>2022-07-29T06:47:11.000Z</published>
    <updated>2022-07-29T06:48:27.505Z</updated>
    
    <content type="html"><![CDATA[<p><strong>你治好我的忧郁，而后赐我悲伤</strong></p><a id="more"></a><ul><li><p>转义字符<br>​    \</p><ul><li>\n                换行</li><li>\r                 行结束</li><li>\t                  制表符</li></ul></li><li><p>多行字符串</p><p>​    每行结束 \ </p></li><li><p>正则表达式的作用</p><p>​    匹配特殊字符或有特殊搭配原则的字符的最佳选择</p></li></ul><ul><li><p>创建 RegExp 对象</p><ul><li><p>字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/规则/</span>属性</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">//i忽视大小写</span></span><br><span class="line"><span class="comment">//m执行多行匹配</span></span><br><span class="line"><span class="comment">//g执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><code>var reg = new RegExp(&quot;规则&quot;,&quot;属性&quot;)</code></li></ul><ul><li><p>方法</p><ul><li><p><code>reg.test(str)</code></p><p>字符串是否包含正则表达式中的字符</p></li><li><p><code>reg.exec(str)</code></p><p>返还一个类数组</p></li><li><p><code>reg.lastIndex</code></p><p>匹配时的游标</p></li><li><p><code>str.match(reg)</code></p><p>返还匹配的字符</p></li><li><p><code>str.split(reg)</code></p><p>按正则表达式拆分</p></li><li><p><code>str.replice(reg,new)</code></p><p>不用正则表达式只能替换一个</p><p>new 可以使用 $ 引用匹配到的字符</p></li></ul></li></ul><ul><li><p>规则</p><ul><li><p>表达式    []</p><p>查找某个范围内的字符，一个方括号表示一位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[123456789]/</span></span><br><span class="line">reg = <span class="regexp">/[0-9]/</span></span><br><span class="line">reg = <span class="regexp">/[A-Z]/</span></span><br><span class="line">reg = <span class="regexp">/[0-9A-Z]/</span></span><br><span class="line">reg = <span class="regexp">/[^a]/</span><span class="comment">//^放在[]里面表示非，放在[]外面表示以什么开头</span></span><br><span class="line">reg = <span class="regexp">/abc|bcd/</span><span class="comment">//或</span></span><br></pre></td></tr></table></figure></li><li><p>元字符(一个元字符表示一位)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\w<span class="comment">//[0-9A-z]</span></span><br><span class="line">\W<span class="comment">//[^w]</span></span><br><span class="line">\d              <span class="comment">//[0-9]</span></span><br><span class="line">\D</span><br><span class="line">\s<span class="comment">//[\t\n\r\f\v]</span></span><br><span class="line">\S</span><br><span class="line">\b<span class="comment">//单词边界</span></span><br><span class="line">\B</span><br><span class="line">\u<span class="comment">//unicode 编码匹配汉字[\u0000-\uffff] 能匹配一切</span></span><br><span class="line">.<span class="comment">//[^\r\n]</span></span><br></pre></td></tr></table></figure></li><li><p>量词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n+<span class="comment">//&#123;1,&#125;</span></span><br><span class="line">n*<span class="comment">//&#123;0,&#125;</span></span><br><span class="line">n?<span class="comment">//&#123;0,1&#125;</span></span><br><span class="line">n&#123;x&#125;<span class="comment">//&#123;x&#125;</span></span><br><span class="line">n&#123;x,y&#125;<span class="comment">//&#123;x,y&#125;</span></span><br><span class="line">n&#123;x,&#125;<span class="comment">//&#123;x,&#125;</span></span><br><span class="line">n$<span class="comment">//以n结束</span></span><br><span class="line">^n<span class="comment">//以n开始</span></span><br><span class="line"><span class="comment">//贪婪匹配：有多个就匹配多个</span></span><br><span class="line"><span class="comment">//非贪婪匹配：量词后面加'?'能少匹配就少匹配</span></span><br></pre></td></tr></table></figure></li><li><p>子表达式与反向引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(\w)\<span class="number">1</span>(\w)\<span class="number">1</span>/<span class="comment">// \1 表示引用第一子表达式的内容</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>正向预查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/a(?=b)/<span class="comment">//查找后面是b的a</span></span><br><span class="line">/a(!=b)/</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>匹配有含义的字符需要转义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/\\/<span class="comment">// 匹配\</span></span><br><span class="line">/\?<span class="regexp">//</span><span class="regexp">/ 匹配?</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;你治好我的忧郁，而后赐我悲伤&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="正则" scheme="https://www.buxiaoxing.com/tags/正则/"/>
    
  </entry>
  
  <entry>
    <title>js基础-js异步加载</title>
    <link href="https://www.buxiaoxing.com/post/6f71.html"/>
    <id>https://www.buxiaoxing.com/post/6f71.html</id>
    <published>2022-07-29T06:45:26.000Z</published>
    <updated>2022-07-29T06:46:35.642Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这世界，至少有朵云，很专注的为你白过一回</strong></p><a id="more"></a><ul><li><p>js 加载的确定</p><p>加载工具方法没必要阻塞文档，js 加载会影响页面效率，一旦网速不好，那么整个网站将等待 js 加载而不进        行后续渲染工作有些工具方法需要加载，用到的时候再加载，不用不加载</p></li></ul><p>​    </p><ul><li><p>异步加载的方式</p><ul><li><p>defer            只兼容 IE ，可以将代码写在 script 标签内部。等待整个页面解析完毕时加载</p></li><li><p>async           标准方法，只能加载外部脚本，加载完就执行</p></li><li><p>通过创建 script dom 元素异步加载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">var script = document.createElement('script')</span><br><span class="line">script.type = "text/javascript"</span><br><span class="line">script.src = "demo.js"</span><br><span class="line">if(script.readyState)&#123;//IE</span><br><span class="line">        script.onreadystatechange = function()&#123;</span><br><span class="line">            if(script.readyState == "complete" || script.readyState == "loaded")&#123;</span><br><span class="line">                test()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;//非IE</span><br><span class="line">        script.onload = function()&#123;</span><br><span class="line">            test()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">document.head.appendChild(script)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>JS 时间加载线<ul><li>创建 document 对象，开始解析 web 页面。解析 HTML 元素和他们的文本内容后添加  Element 对象和 Text 节点到文档中，阶段 <code>document.readyState = &quot;loading&quot;</code></li><li>遇到 link 外部 css，创建线程加载，并继续解析文档</li><li>遇到 script 外部 js ，并且没有设置 async，defer ，浏览器加载，并阻塞，等待 js 加载完成并执行脚本，然后继续解析文档</li><li>遇到 script 外部 js , 并且设置有 async, defer, 浏览器创建线程加载，并继续解析文档，对于 async 属性的脚本，脚本加载完成之后立即执行（异步禁止使用 document.write()）</li><li>对于 img 等，先正常解析 html 结构，然后浏览器异步加载，src，并继续解析文档</li><li>文档解析完成， <code>document.readyState = &#39;interactive&#39;</code></li><li>当文档解析完成后，所有设置 defer 的脚本会按照顺序执行。（注意与 async 的不同，但同样禁止使用 document.write()）</li><li>document 对象触发 DOMContentLoaded 事件，这也标志着程序执行从同步脚本执行的阶段，转为事件驱动阶段</li><li>当所有 async 的脚本加载完成并执行后、img 等加载完成后，document.readyState = ‘complete’，window 对象触发 load 事件</li><li>从此，以异步响应方式处理用户输入、网络事件</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;这世界，至少有朵云，很专注的为你白过一回&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="异步" scheme="https://www.buxiaoxing.com/tags/异步/"/>
    
  </entry>
  
  <entry>
    <title>js基础-json</title>
    <link href="https://www.buxiaoxing.com/post/49eb.html"/>
    <id>https://www.buxiaoxing.com/post/49eb.html</id>
    <published>2022-07-29T06:41:51.000Z</published>
    <updated>2022-07-29T06:43:04.142Z</updated>
    
    <content type="html"><![CDATA[<p><strong>所谓爱情，其实就是一次大病，我的病好了</strong></p><a id="more"></a><ul><li><p>概念与用途</p><p>​    JSON 是一种传输数据的格式（以对象为样板，本质上是对象，但用途有区别，对象是本地用的，json用来传输    的），JSON 的属性名必须双引号</p></li></ul><ul><li>JSON.parse()</li></ul><p>​        <code>string         --&gt;                JSON</code></p><ul><li>JSON.stringfy()</li></ul><p>​        <code>json        --&gt;            string</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;所谓爱情，其实就是一次大病，我的病好了&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="json" scheme="https://www.buxiaoxing.com/tags/json/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-事件</title>
    <link href="https://www.buxiaoxing.com/post/a4a9.html"/>
    <id>https://www.buxiaoxing.com/post/a4a9.html</id>
    <published>2022-07-29T06:40:46.000Z</published>
    <updated>2022-07-29T06:43:10.991Z</updated>
    
    <content type="html"><![CDATA[<p><strong>花店不开了，花继续开</strong></p><a id="more"></a><ul><li><p>绑定事件</p><ul><li><p>element.onclick = function(){}</p><p>单个对象的单个事件只能绑定一个函数</p><p>解除事件:  <code>element.onclick = null</code></p></li><li><p>element.addEventListener(‘click’, function(){}, false)</p><p>单个对象的单个事件可以绑定多个函数</p><p>解除事件：<code>element.removeEventListener(&#39;click&#39;, function(){}, false)</code></p></li><li><p>attachEvent(‘onclick’, function(){})</p><p>IE 独有，与 addEventListener 一样</p><p>this –&gt; window</p><p>解除: <code>detachEvent(&#39;onclick&#39;, function(){})</code></p></li></ul></li></ul><ul><li><p>事件处理模型：冒泡，捕获</p><ul><li><p>事件冒泡</p><p><code>element.addEventListener(&#39;click&#39;, function(e){}, false)</code></p><ul><li><p>结构上（非视觉上）嵌套的元素，如果触发子元素事件，会一级一级向上传递事件</p></li><li><p>先触发子元素事件，再触发父元素事件</p></li><li><p>取消冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.stopPropagation()<span class="comment">//W3C标准</span></span><br><span class="line">e.cancelBubble()<span class="comment">//IE</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>事件捕获<br><code>element.addEventListener(&#39;click&#39;, function(){}, true)</code></p><p>先触发父元素事件，再触发子元素事件</p></li></ul><ul><li><p>事件对象</p><p>事件函数中添加参数 e ，系统会自动给函数传参</p><p><code>function(e){}</code></p><ul><li><p>获取事件对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = e || <span class="built_in">window</span>.event<span class="comment">//兼容性</span></span><br><span class="line"><span class="comment">//事件源对象，触发事件的元素，冒泡的最底层的元素</span></span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement</span><br></pre></td></tr></table></figure></li></ul></li><li><p>阻止默认事件</p><ul><li><p>右键出菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span><span class="comment">//只针对 on+事件</span></span><br><span class="line">    e.preventDefault()<span class="comment">//W3C</span></span><br><span class="line">    e.returnValue = <span class="literal">false</span><span class="comment">//IE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>a 标签点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>事件类型</p><ul><li><p>鼠标事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line">click </span><br><span class="line">mousedown</span><br><span class="line">mouseup</span><br><span class="line">mousemove</span><br><span class="line"></span><br><span class="line">mousemover</span><br><span class="line">mouseout</span><br><span class="line">contextmenu</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动端</span></span><br><span class="line">touchstart</span><br><span class="line">touchmove</span><br><span class="line">touchend</span><br></pre></td></tr></table></figure><p>*<em>注：只有 mousedown 和 mouseup 可以区分左键右键 <code>e.button: 0(左键), 2(右键), 1(中间)</code> *</em></p></li><li><p>键盘事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keydown</span><br><span class="line">keypress</span><br><span class="line">keyup</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>**注意：keydown  keypress 按下会一直触发**- keydown                                        能检测所有按键- keypress                                        只能检测字符键（能检测字符键的大小写）  keydown &gt; keypress &gt; keyup</code></pre><ul><li><p>文本操作事件</p><ul><li>input                                              每次输入都会触发</li><li>focus     </li><li>blur</li><li>change                                          鼠标聚焦和鼠标脱胶时，触发框内容发生改变触发</li></ul></li><li><p>window事件</p><ul><li>onscroll                                         滚动条滚动触发</li><li>load                                                页面渲染完触发</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;花店不开了，花继续开&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="event" scheme="https://www.buxiaoxing.com/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>git中的tag</title>
    <link href="https://www.buxiaoxing.com/post/6f24.html"/>
    <id>https://www.buxiaoxing.com/post/6f24.html</id>
    <published>2022-07-29T06:34:59.000Z</published>
    <updated>2022-07-29T06:39:16.412Z</updated>
    
    <content type="html"><![CDATA[<p><strong>你没有如期归来，这正是离别的意义</strong></p><a id="more"></a><ul><li><p>Git 实际上是一条条commit记录</p></li><li><p>分支是对多条commit记录的引用</p></li><li><p>head指向当前的commit记录，切换分支实际上就是移动head</p></li><li><p>如果一条commit记录没有被任何分支和tag引用，那么就会被回收，类似js的回收机制，不可达就会被回收</p></li><li><p>branch 对应一系列 commit，是很多点连成的一根线，有一个HEAD 指针，是可以依靠 HEAD 指针移动的</p></li><li><p>tag是对应commit的一个点，是不可移动的</p><ul><li><p>tag操作的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagName&gt; <span class="comment">#创建本地tag,基于当前分支的最后一个commit</span></span><br><span class="line">git push origin &lt;tagName&gt; <span class="comment">#推送到远程仓库</span></span><br><span class="line">git push origin --tags <span class="comment">#一次推送本地所有未推送的标签</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline <span class="comment">#查看当前分支的提交历史，里面包含 commit id</span></span><br><span class="line">git tag -a &lt;tagName&gt; &lt;commitId&gt; <span class="comment">#创建本地tag,基于指定commit</span></span><br><span class="line"></span><br><span class="line">git show &lt;tagName&gt; <span class="comment"># 查看本地某个tag的详细信息</span></span><br><span class="line"><span class="comment">#查看本地所有tag</span></span><br><span class="line">git tag </span><br><span class="line">git tag -l</span><br><span class="line"><span class="comment"># 查看远程所有tag</span></span><br><span class="line">git ls-remote --tags origin</span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">git tag -d &lt;tagName&gt;</span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">git push origin :&lt;tagName&gt;</span><br><span class="line"><span class="comment"># 重命名tag: 本质上是删除旧名字的tag，再新建新名字tag</span></span><br><span class="line"><span class="comment"># 如果只在本地</span></span><br><span class="line">git tag -d &lt;oldTagName&gt;</span><br><span class="line">git tag &lt;newTagName&gt;</span><br><span class="line">git push origin &lt;newTagName&gt;</span><br><span class="line"><span class="comment"># 如果远程也有</span></span><br><span class="line">git tag -d &lt;oldTagName&gt;</span><br><span class="line">git push origin :&lt;oldTagName&gt;</span><br><span class="line">git tag &lt;newTagName&gt;</span><br><span class="line">git push origin &lt;newTagName&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;你没有如期归来，这正是离别的意义&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="Git" scheme="https://www.buxiaoxing.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>js基础-window</title>
    <link href="https://www.buxiaoxing.com/post/6199.html"/>
    <id>https://www.buxiaoxing.com/post/6199.html</id>
    <published>2022-07-28T09:52:13.000Z</published>
    <updated>2022-07-28T09:52:47.060Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我坐在树下，等最后一片落叶，就当和你最后的告别</strong></p><a id="more"></a><ul><li>定时器<ul><li>setInterval(执行函数，毫秒数)                                        每过多少毫秒执行一次函数，返回该定时器的唯一标识</li><li>clearInterval(timer)                                                          通过唯一标识终止定时器</li><li>setTimeout(函数，毫秒数)                                               过多少毫秒执行函数，只执行一次，返回该定时器唯一标识</li><li>clearTimeout(timer)</li></ul></li></ul><ul><li><p>滚动条</p><p><code>pageXOffset/pageYOffset</code>                                                  查看滚动距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装一个兼容的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.pageXOffset)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">            y: <span class="built_in">window</span>.pageYOffset</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">            y: <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scollTop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>scoll(x,y)</code>                                让滚动条滚动到指定距离</p><p><code>scollBy(x,y)</code>                            累加滚动距离</p></li><li><p>浏览器窗口大小</p><p><code>innerWidth/innerHeight</code>                            可视区窗口大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> &amp;&amp; <span class="built_in">window</span>.innerWidth)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            x: <span class="built_in">window</span>.innerWidth,</span><br><span class="line">            y: <span class="built_in">window</span>.innerHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode == <span class="string">'BackCompat'</span>)&#123;<span class="comment">//没有头标签 &lt;!DOCTYPE html&gt;，向后兼容模式</span></span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                x: <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">                y: <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                x: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">                y: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取元素样式</p><p><code>getComputedStyle(element,null)   //获取元素样式表</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getComputedStyle(element, <span class="literal">null</span>)<span class="comment">//获取样式表</span></span><br><span class="line"><span class="comment">//a.第二个参数可以传 after/before (获取伪元素)</span></span><br><span class="line"><span class="comment">//b.是经过计算的最终值</span></span><br><span class="line"><span class="comment">//c.该方法只能读取，不能写入</span></span><br><span class="line"><span class="comment">//d.IE8 一下不兼容</span></span><br><span class="line"><span class="comment">//封装一个兼容的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>)[prop]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>eval</p><p><code>eval(String)</code>                                                执行一个字符串表达式，并返回表达式的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">"document.write('123')"</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我坐在树下，等最后一片落叶，就当和你最后的告别&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-Date</title>
    <link href="https://www.buxiaoxing.com/post/5309.html"/>
    <id>https://www.buxiaoxing.com/post/5309.html</id>
    <published>2022-07-28T09:50:51.000Z</published>
    <updated>2022-07-28T09:52:47.058Z</updated>
    
    <content type="html"><![CDATA[<p><strong>世界上有两样东西不可直视，一是太阳，二是人心</strong></p><a id="more"></a><ul><li><p>创建日期对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">Date</span>()<span class="comment">//可以直接返回当前时间</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getDate()                                 <span class="comment">//返回一月中的某一天</span></span><br><span class="line">getDay()                                  <span class="comment">//返回一周中的第几天  0~6   星期天~星期六</span></span><br><span class="line">getMonth()                                <span class="comment">//返回月份 0~11</span></span><br><span class="line">getFullYear()                             <span class="comment">//返回年份</span></span><br><span class="line">getHours()                                <span class="comment">//时</span></span><br><span class="line">getMinutes()</span><br><span class="line">getSeconds()</span><br><span class="line">getMillseconds()</span><br><span class="line">toString()</span><br><span class="line">getTime()                                 <span class="comment">//1970年1月1日至今的毫秒数</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;世界上有两样东西不可直视，一是太阳，二是人心&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-dom</title>
    <link href="https://www.buxiaoxing.com/post/a964.html"/>
    <id>https://www.buxiaoxing.com/post/a964.html</id>
    <published>2022-07-28T09:48:16.000Z</published>
    <updated>2022-07-29T06:43:43.081Z</updated>
    
    <content type="html"><![CDATA[<p><strong>曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候</strong></p><a id="more"></a><blockquote><p><strong>文档（html）对象（节点）模型（文档解析为dom树）</strong></p><p>将html解析成一个个节点对象，配合js语法就能操作html</p><p><strong>不仅 js 能操作 dom ，java、php 都能操作 dom</strong></p></blockquote><ul><li><p>节点的增删改查</p><ul><li><p>查</p><ul><li><p>getElementById()                                              当个对象，因为 id 唯一</p></li><li><p>getElementByTagName()                                  通过标签名，查询节点，类数组，                          <code>getElementByTagName(&#39;*&#39;) 选中所有标签</code></p></li><li><p>getElementByClassName()                               通过类名，查询节点，类数组</p></li></ul></li></ul></li></ul><pre><code>- querySelector()                                                   可以通过 css 选择器的方式选择 dom 元素，当个对象- querySelectorAll()                                                对象数组  **注：querySelector 选中的是副本，员 dom 元素改变，选中副本并不会更新**- document.body                                                    直接选中 body 节点- document.head                                                    直接选中 head 节点**节点**  - parentNode                                                             获取父节点  - ChildNodes                                                              获取子节点数组  - firstChild                                                                   第一个子节点  - lastChild                                                                    最后一个子节点  - nextSibling                                                                下一个兄弟节点  - previousSibling                                                         上一个兄弟节点  - hasChildNodes                                                           判断是否有子节点**元素节点**- parentElement                                                             获取父元素节点</code></pre><ul><li>children                                                                          获取子元素节点数组<ul><li>firstElementChild                                                          第一个元素子节点</li><li>lastElementChild                                                            最后一个元素子节点</li><li>nextElementSibling</li><li>previousElementSibling</li><li>setAttribute(‘id’)                                                               获取属性值</li></ul></li></ul><ul><li><p>改</p><ul><li><p>innerHTML                                                                         标签中的内容，可以使HTML结构</p></li><li><p>setAttribute(‘id’, ‘only’)                                                     设置属性</p></li><li><p>preNode.replaceChild(newNode, oldNode)                  替换 oldNode 并把 oldNode 返回出来</p><p><strong>注意，如果 newNode 也是 preNode 的子节点的话，替换后原来 newNode 节点将会被移除</strong></p></li></ul><ul><li><p>增</p><ul><li><p>createElement(“div”)                                                                  创建一个元素节点</p></li><li><p>createTextNode()                                                                         创建文本节点</p></li><li><p>createCommenNode()                                                                 创建注释节点</p></li><li><p>createdocumentFragment()                                                        创建文档碎片节点</p></li><li><p>preNode.appendChild(node)                                                      在子节点的最后添加节点</p></li><li><p>preNode.insertBefore(a,b)                                                           在 b 节点前插入 a 节点</p><p><strong>注意：如果 a 是 preNode的节点的话，那么插入后，原来 a 节点将会被移除</strong></p></li></ul></li><li><p>删</p><ul><li><p>preNode.removeChild(node)                                                  删除父节点下的一个节点，返还回来</p></li><li><p>node.remove()                                                                                 节点自我删除</p></li></ul></li></ul></li></ul><ul><li>节点的类型<ul><li>元素节点                                         1</li><li>属性节点                                         2</li><li>文本节点                                         3</li><li>注释节点                                         8</li><li>document                                      9</li><li>DocumentFragment                    11</li></ul></li></ul><ul><li>节点的属性<ul><li>nodeName                                     节点标签的名称</li><li>nodeValue                                      节点的值（只有文本节点和注释节点才有）</li><li>nodeType                                        返回每个节点对应的数字</li><li>attributes                                         属性节点类数组</li></ul></li></ul><ul><li><p>节点样式数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classList</span><br><span class="line">add()<span class="comment">//增加样式</span></span><br><span class="line">contain()           <span class="comment">//是否包含样式</span></span><br><span class="line">    remove()            <span class="comment">//移除样式</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改 css 样式</p><p>element.style.属性名 = 属性值                                                      改变查询的是行间样式</p><ul><li>‘-‘链接的属性，改为小驼峰</li><li>float 是保留字，建议 cssFloat</li><li>写入的属性必须是字符串值</li></ul><p><strong>推荐将样式封装到类中，更改样式直接更改 class 就行</strong></p></li></ul><ul><li><p>节点集合</p><ul><li><p>按实时分</p><ul><li>动态集合<ul><li>children</li><li>ChildNode</li><li>getlementByTagName()</li><li>…</li></ul></li><li>静态集合<ul><li>querySelectorAll()   </li></ul></li></ul></li><li><p>按对象分</p><ul><li><p>Nodelist                              能存放所有节点</p><ul><li><p>querySelectorAll()</p></li><li><p>childNodes</p></li><li><p>…</p></li></ul></li><li><p>HTMLConnection              只能存放标签节点</p><ul><li>children</li><li>getElementByTagName</li><li>…</li></ul></li></ul></li></ul></li><li><p>dom 树</p><p><img src="http://img.buxiaoxing.com/uPic/2022/07/28174921-bGhbX3-Iuv5qQ.png" alt="image-20201014103030140"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="浏览器" scheme="https://www.buxiaoxing.com/tags/浏览器/"/>
    
  </entry>
  
  <entry>
    <title>js基础-es5.0</title>
    <link href="https://www.buxiaoxing.com/post/894c.html"/>
    <id>https://www.buxiaoxing.com/post/894c.html</id>
    <published>2022-07-28T09:47:07.000Z</published>
    <updated>2022-07-29T06:43:39.305Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我的人生就是一本低俗小说，书里不堪的情节越多，我的观众就越欣喜若狂</strong></p><a id="more"></a><ul><li>es5.0 严格模式启用</li></ul><p>​        逻辑最顶端加上 “use strict”</p><ul><li><p>es5.0 严格模式：当与es3.0冲突时，使用 es5.0 规范</p><ul><li><p><code>arguments.callee</code> 就会报错，<code>caller</code> 也不支持</p></li><li><p>变量必须声明</p></li><li><p>预编译 this 没有指向</p></li></ul></li><li><p>with</p><ul><li><p>with 可以改变作用域链，可以将参数对象变为代码作用域链的最顶端，可以用于命名空间，防止全局污染，节省代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="built_in">document</span>)&#123;</span><br><span class="line">    write(<span class="string">"1"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>缺点：效率低， es5.0 严格模式不支持</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我的人生就是一本低俗小说，书里不堪的情节越多，我的观众就越欣喜若狂&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-try-catch</title>
    <link href="https://www.buxiaoxing.com/post/e5b9.html"/>
    <id>https://www.buxiaoxing.com/post/e5b9.html</id>
    <published>2022-07-28T09:45:48.000Z</published>
    <updated>2022-07-29T06:43:29.028Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一个人自以为刻骨铭心的回忆，别人也许早已经 忘记了</strong></p><a id="more"></a><ul><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//要报错的语句</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.name+<span class="string">","</span>+e.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  在 try 中发生错误，不会再执行 try 后面的语句，转而执行 catch 语句，不会让程序终止</p><ul><li>报错类型<ul><li><code>EvalError</code>                         eval() 的使用和定义不一致</li><li><code>RangeError</code>                      数组越界</li><li><code>ReferenceError</code>              非法或不能识别的引用数值</li><li><code>SynaxError</code>                       发生语法错误</li><li><code>TypeError</code>                         操作数类型错误</li><li><code>URIError</code>                            URI 处理函数不当</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;一个人自以为刻骨铭心的回忆，别人也许早已经 忘记了&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="error" scheme="https://www.buxiaoxing.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>js基础-数组</title>
    <link href="https://www.buxiaoxing.com/post/7101.html"/>
    <id>https://www.buxiaoxing.com/post/7101.html</id>
    <published>2022-07-28T09:44:19.000Z</published>
    <updated>2022-07-29T06:43:54.133Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我渴望能见你一面，但我清楚的知道，唯有你也想见我的时候，我们的见面才有意义</strong></p><a id="more"></a><ul><li><p>数组的定义方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4];</span><br><span class="line">var arr = new Array(1,2,3,4);</span><br><span class="line">两种方法创建的对象没有区别</span><br></pre></td></tr></table></figure><p><strong>注: new array(2)</strong><br>里面只有一个参数代表创建数组的长度</p></li><li><p>数组常用方法</p><ul><li><p>能改变原数组的  </p><ul><li><p>push()<br><code>在数组最后添加元素，多个参数依次添加到最后，返回数组长度</code></p></li><li><p>pop()<br><code>取出数组的最后一位元素，并返回该元素</code></p></li><li><p>unshift()  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = [],</span><br><span class="line">arr.unshift(1,2,3)    -&gt;  [1,2,3]而不是[3,2,1]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>- shift()    取出数组第一个元素，并返回该元素- reverse()    `原数组倒序，并返回该数组 `- sort()       升序排序，返回原数组  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以自定义排序规则</span></span><br><span class="line"><span class="comment">//1. 必须写两个形参，第一个参数代表前面的数，第二个参数代表后面的数</span></span><br><span class="line"><span class="comment">//2. 返回值为正，后面的数在前面(换位)；返回值为负，前面的数在前面（不动）；0，不动</span></span><br><span class="line">sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b<span class="comment">//升序</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Math</span>.random() - <span class="number">0.5</span>)<span class="comment">//乱序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>- splice(从第几位开始，[截取长度], [在切口处添加新数据])                 --&gt;     返回截取数组，原数组改变  可以使截取长度为0，当做插入方法使用  开始位数可以使用负数        `位数 += 位数 &gt; 0 ? 0:length`</code></pre><ul><li><p>不能改变原数组的方法</p><ul><li><p>concat                链接两个数组，返回一个新数组</p><p><code>var arr = arr1.concat(arr2)</code></p></li><li><p>join( [以什么字符链接] )               将数组中的所有元素放入字符串，默认分隔符为逗号</p></li><li><p>slice( 从该位开始截取, [截取到改位])                 返回截取的数组，不改变原数组</p></li><li><p><code>filter</code></p><blockquote><p>过滤，返回过滤后的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function"><span class="params">n</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n&lt;=<span class="number">2</span><span class="comment">//参数：回调函数必须返回一个 boolean 值</span></span><br><span class="line">    <span class="comment">//true会添加到返回数组中，false不会添加到返回数组中</span></span><br><span class="line">&#125;)<span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- `map`  &gt; 遍历每个数组元素，返回新数组  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = arr.map(<span class="function"><span class="params">n</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="number">2</span><span class="comment">//回调函数返回一个数组元素</span></span><br><span class="line">&#125;)<span class="comment">//[2,4,6,8]</span></span><br></pre></td></tr></table></figure>- `reduce`  &gt; 汇总  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">n1,n2</span>)=&gt;</span>&#123;<span class="comment">//回调函数有两个参数</span></span><br><span class="line">    <span class="keyword">return</span> n1+n2<span class="comment">//参数1：上次回调参数返回的值（第一次调用则是数组首个元素）</span></span><br><span class="line">&#125;)<span class="comment">//参数2：数组第二个元素向后遍历</span></span><br><span class="line"><span class="comment">//10</span></span><br></pre></td></tr></table></figure>- `forEach`  &gt; 遍历每个数组元素，与map相比不会返回新数组- `find`    &gt; 返回符合测试函数条件的第一个元素    和 `filter` 相比， `filter` 返回的是所有符合测试函数条件的数组    而 `find()` 只是返回 `filter` 数组的第一个元素    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'alice'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">'女'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'jack'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">'男'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'bob'</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = arr.find(<span class="function"><span class="params">element</span> =&gt;</span> (age &lt;= <span class="number">20</span>))</span><br><span class="line"><span class="comment">//&#123;name: 'alice', age: 20, sex: '女'&#125;</span></span><br></pre></td></tr></table></figure>- `every`    &gt; 测试一个数组里所有元素是否都能通过测试，都满足才返回true，否则返回false    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = arr.every(<span class="function">(<span class="params">item</span>)=&gt;</span>item&lt;<span class="number">40</span>)</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>类数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'length'</span>: <span class="string">'3'</span>,</span><br><span class="line">    <span class="string">'splice'</span>: <span class="string">'Array.prototype.splice'</span>,</span><br><span class="line">    <span class="string">'push'</span>: <span class="string">'Array.prototype.push'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>索引必须是数字</li><li>必须有<code>length</code>属性</li><li>最好加上 <code>push</code></li><li>类数组拥有数组和对象的特性</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;我渴望能见你一面，但我清楚的知道，唯有你也想见我的时候，我们的见面才有意义&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="数组" scheme="https://www.buxiaoxing.com/tags/数组/"/>
    
  </entry>
  
  <entry>
    <title>js基础-this</title>
    <link href="https://www.buxiaoxing.com/post/cf5e.html"/>
    <id>https://www.buxiaoxing.com/post/cf5e.html</id>
    <published>2022-07-28T09:40:56.000Z</published>
    <updated>2022-07-28T09:52:47.063Z</updated>
    
    <content type="html"><![CDATA[<p><strong>心若没有栖息的地方，到哪里都是流浪</strong></p><a id="more"></a><ul><li><p>判断this指向</p><ul><li>预编译中this指向window</li><li>全局作用域里this指向window</li><li>call/apply改变this指向</li><li>obj.方法()，谁调用方法，方法中的this就指向谁</li></ul></li><li><p>常出现this指向错误的地方</p><ul><li><p>事件里调用外部变量、函数<br><strong>事件里的this指向的是事件dom元素</strong><br><strong>解决：将外部的this保存在一个变量里</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.oGo.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.style.display = <span class="string">"none"</span>;</span><br><span class="line">    self.flag = <span class="literal">true</span>;</span><br><span class="line">    self.move();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>作为函数参数传入</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;心若没有栖息的地方，到哪里都是流浪&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>ji基础-枚举</title>
    <link href="https://www.buxiaoxing.com/post/91c7.html"/>
    <id>https://www.buxiaoxing.com/post/91c7.html</id>
    <published>2022-07-28T09:38:58.000Z</published>
    <updated>2022-07-28T09:52:47.064Z</updated>
    
    <content type="html"><![CDATA[<p><strong>或许你会想起我，像想起一朵永不重开的花朵</strong></p><a id="more"></a><ul><li><p>for in 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    obj[prop];      <span class="comment">//prop就是每个属性的属性名，字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>遍历对象，会遍历原型链上的属性，但不会延展到Object</strong></p><ul><li><p>hasOwnProperty()</p><p>对象.hasOwnProperty(属性)，判断该属性是不是对象上的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(prop))&#123;</span><br><span class="line">        obj[prop]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>这样就只会遍历对象自身的对象，而不会遍历原型链上的属性</strong></p><ul><li><p>in 操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//"属性" in 对象      -&gt;      判断对象能否调用该属性，返还一个boolean值</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>instanceof</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A instanceof B          -&gt;          A对象的原型链上有没有B的原型，返回一个boolean值</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;或许你会想起我，像想起一朵永不重开的花朵&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-命名空间</title>
    <link href="https://www.buxiaoxing.com/post/bbef.html"/>
    <id>https://www.buxiaoxing.com/post/bbef.html</id>
    <published>2022-07-28T09:38:00.000Z</published>
    <updated>2022-07-28T09:52:47.062Z</updated>
    
    <content type="html"><![CDATA[<p><strong>等到空洞的躯壳上生满了野草，你才想起那被你揉成废纸般丢弃的灵魂</strong></p><a id="more"></a><ul><li><p>命名空间的作用</p><p>防止污染全局变量</p></li><li><p>命名空间的实现方式</p><ul><li>对象<br>将一个功能封装到一个对象中，调用的话对象.属性</li><li>闭包<br>将功能封装到函数中，最后返回一个函数作为接口</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;等到空洞的躯壳上生满了野草，你才想起那被你揉成废纸般丢弃的灵魂&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
  </entry>
  
  <entry>
    <title>js基础-继承</title>
    <link href="https://www.buxiaoxing.com/post/61e8.html"/>
    <id>https://www.buxiaoxing.com/post/61e8.html</id>
    <published>2022-07-27T17:10:07.000Z</published>
    <updated>2022-07-27T17:13:32.456Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一想到终将是你的路人，便觉得，沦为整个世界的路人。风虽大，却都绕过我灵魂</strong></p><a id="more"></a><ul><li><p>原型链模式(传统模式)</p><p>继承了太多容余属性</p></li><li><p>共有原型    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多个对象的原型指向同一对象</span></span><br><span class="line">Father.prototype = obj;</span><br><span class="line">Son.prototype = obj;</span><br><span class="line"><span class="comment">//链型结构      --&gt;         树形结构</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,origin</span>)</span>&#123;</span><br><span class="line">    Target.prototype = Origin.prototype</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  <strong>缺点：单独修改一个构造函数的原型另一个构造函数的原型也会受影响</strong></p><ul><li><p>圣杯模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    f.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> f();             <span class="comment">//Target的constructor默认指向Origin</span></span><br><span class="line">    Target.prototype.constructor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;   <span class="comment">//设置一个属性，可以查看真实原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>)</span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">        Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        Target.prototype.constructor = Target;</span><br><span class="line">        Target.prototype.uber = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;一想到终将是你的路人，便觉得，沦为整个世界的路人。风虽大，却都绕过我灵魂&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="前端" scheme="https://www.buxiaoxing.com/tags/前端/"/>
    
    <category term="js基础" scheme="https://www.buxiaoxing.com/tags/js基础/"/>
    
    <category term="原型" scheme="https://www.buxiaoxing.com/tags/原型/"/>
    
  </entry>
  
  <entry>
    <title>serverless部署hexo博客，免费托管在腾讯云上</title>
    <link href="https://www.buxiaoxing.com/post/5b43.html"/>
    <id>https://www.buxiaoxing.com/post/5b43.html</id>
    <published>2022-07-27T09:50:14.000Z</published>
    <updated>2022-07-27T10:24:02.595Z</updated>
    
    <content type="html"><![CDATA[<p><strong>岁月不堪数，故人不如初</strong></p><a id="more"></a><h3 id="安装serverless插件"><a href="#安装serverless插件" class="headerlink" title="安装serverless插件"></a>安装serverless插件</h3><p><code>npm install -g serverless</code></p><h3 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h3><ul><li><p>首先需要注册登陆腾讯云</p></li><li><p>进入<a href="https://console.cloud.tencent.com/cos/bucket" target="_blank" rel="noopener">对象存储控制台</a></p></li><li><p>创建存储桶</p><ul><li>名称自定义</li><li>地域随便选</li><li>访问权限选择 <strong>公有读私有写</strong></li><li>一直下一步到创建成功</li></ul><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27175817-F0SF6b-image-20220727175816595.png" alt="image-20220727175816595"></p></li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><p>在hexo项目根目录下新建 <code>serverless.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># serverless.yml</span></span><br><span class="line"><span class="attr">component:</span> <span class="string">website</span> <span class="comment"># (必填) 引用 component 的名称，当前用到的是 tencent-website 组件</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">hexoComponent</span> <span class="comment"># (必填) 该 website 组件创建的实例名称</span></span><br><span class="line"><span class="attr">app:</span> <span class="string">websiteApp</span> <span class="comment"># (可选) 该 website 应用名称</span></span><br><span class="line"><span class="attr">stage:</span> <span class="string">dev</span> <span class="comment"># (可选) 用于区分环境信息，默认值是 dev</span></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line"> <span class="attr">src:</span></span><br><span class="line">   <span class="attr">src:</span> <span class="string">./public</span> <span class="comment"># Upload static files generated by HEXO</span></span><br><span class="line">   <span class="attr">index:</span> <span class="string">index.html</span></span><br><span class="line">   <span class="comment"># dist: ./dist</span></span><br><span class="line">   <span class="comment"># hook: npm run build</span></span><br><span class="line">   <span class="comment"># websitePath: ./</span></span><br><span class="line"> <span class="attr">region:</span> <span class="string">ap-guangzhou</span> <span class="comment"># 创建存储桶时选的地域</span></span><br><span class="line"> <span class="attr">bucketName:</span> <span class="string">my-bucket</span> <span class="comment"># 创建存储桶写的名称</span></span><br><span class="line"> <span class="attr">protocol:</span> <span class="string">https</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>输入命令<code>serverless deploy</code></p><p>中间可能要微信扫描授权</p></li><li><p>部署成功</p><p> <img src="http://img.buxiaoxing.com/uPic/2022/07/27180748-R8osow-image-20220727180746385.png" alt="image-20220727180746385"></p><p>存储桶的文件列表应该也有了你传上去的文件</p></li></ul><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27181037-HDJtZn-image-20220727181035665.png" alt="image-20220727181035665"></p><p>基础配置中的静态网站，复制访问节点的url在浏览器中访问</p><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27181200-vTe12C-image-20220727181158390.png" alt="image-20220727181158390"></p><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p><img src="http://img.buxiaoxing.com/uPic/2022/07/27182200-MxurZP-image-20220727182158361.png" alt="image-20220727182158361"></p><ul><li>这里可以添加需要自定义的域名</li><li>然后到域名服务商那里新增解析记录，指向这里的CNAME值</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;岁月不堪数，故人不如初&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="后端" scheme="https://www.buxiaoxing.com/tags/后端/"/>
    
    <category term="hexo" scheme="https://www.buxiaoxing.com/tags/hexo/"/>
    
    <category term="部署" scheme="https://www.buxiaoxing.com/tags/部署/"/>
    
    <category term="serverless" scheme="https://www.buxiaoxing.com/tags/serverless/"/>
    
  </entry>
  
</feed>
